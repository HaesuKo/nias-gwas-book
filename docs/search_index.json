[["index.html", "GWAS 절차 저자 정보", " GWAS 절차 고해수, 농학박사 국립축산과학원(NIAS) 가축개량평가과 kosoo91@korea.kr 2025-09-08 저자 정보 이 문서는 국립축산과학원 가축개량평가과의 고해수 박사가 작성하였습니다. 소속: 국립축산과학원 가축개량평가과 이메일: kosoo91@korea.kr 이 문서에 대한 질문이나 제안 사항이 있으시면 위 이메일로 연락 주시기 바랍니다. "],["gwas-분석-사전-준비-절차.html", "1 GWAS 분석 사전 준비 절차 1.1 Genotype data (유전자형 데이터) 준비 1.2 Phenotype data (표현형 데이터) 준비 1.3 R/Rstudio 프로그램 다운로드 및 설치 1.4 plink2 프로그램 다운로드 및 설치 1.5 R package 설치 1.6  GWAS 분석 사전 준비 완료", " 1 GWAS 분석 사전 준비 절차 개요 GenomeStudio PLINK 플러그인 설치 → .bsc → .ped/.map 파일 변환 R / RStudio 설치 및 시작 화면 고정 RStudio 레이아웃과 패널별 역할 파악 R Project 생성 & 작업 디렉토리 고정 plink2 다운로드·PATH 등록·RStudio 터미널 확인 필요 R 패키지 일괄 설치/로딩 .og-line{ position:absolute; left:8px; top:0; bottom:0; width:2px; background:#e2e6ea; } .og-node{ position:relative; padding-left:2rem; margin:.75rem 0; } .og-dot{ position:absolute; left:0; top:.35rem; width:.9rem; height:.9rem; background:#fff; border:2px solid #0d6efd; border-radius:999px; box-shadow:0 0 0 3px rgba(13,110,253,.08); } .og-card{ border:1px solid #e2e6ea; border-radius:10px; padding:.55rem .7rem; background:#fcfcff; } 1.1 Genotype data (유전자형 데이터) 준비 입력 파일(.bsc)을 GenomeStudio의 PLINK 플러그인을 이용하여 최종 산출물(.ped, .map)로 변환시키는 과정이 필요하다. .box{rx:12; ry:12; stroke-width:2;} .box.gray{fill:#e9ecef; stroke:#adb5bd;} .box.blue{fill:#cfe2ff; stroke:#0d6efd;} .box.green{fill:#d1e7dd; stroke:#198754;} .edge{stroke:#495057; stroke-width:2; fill:none; marker-end:url(#arrow);} .label{font-family:-apple-system, Segoe UI, Roboto, \"Noto Sans KR\", Arial, sans-serif; font-size:16px; font-weight:600;} .small{font-size:14px; font-weight:500;} .cluster{fill:#f8f9fa; stroke:#ced4da; stroke-width:1.5;} .cluster-title{font-family:-apple-system, Segoe UI, Roboto, \"Noto Sans KR\", Arial, sans-serif; font-size:16px; font-weight:700;} 목표: PLINK 파일 형식으로 유전자형 데이터 변환 NIAS_ibv3_296ea.bsc GenomeStudio PLINK 플러그인 .ped 파일 유전자형 데이터 .map 파일 마커 위치 데이터 1.1 PLINK Input Report Plug-in v2.1.4 다운로드 및 설치 아래 링크에서 플러그인을 내려받아 설치한다. 사이트 접속: https://sapac.support.illumina.com/downloads/genomestudio-2-0-plug-ins.html 사이트 열기 그림 1. GenomeStudio PLINK 플러그인 다운로드 페이지 ⚠️ 다운로드에는 각자의 일루미나 계정이 필요하다. 계정이 없으면 가입 후 진행해야한다. 설치 순서 다운로드 받은 파일 압축을 해제 SetupPLINKInputReport_2.1.4_GS2.msi 더블 클릭 → installer 실행 installer 안내에 따라 Next → Next → Next → Close 클릭 그림 2. GenomeStudio PLINK 플러그인 설치 화면 1.2 GenomeStudio에서 .bsc → PLINK 파일 내보내기 전제: PLINK Input Report Plug-in이 설치되어 있어야 하며, GenomeStudio 프로젝트에 NIAS_ibv3_296ea.bsc가 로드 되어있어야 한다. NIAS_ibv3_296ea.bsc 파일을 더블클릭하면 된다. 내보내기 단계 GenomeStudio 상단 메뉴에서 Analysis → Reports → Report Wizard 를 연다. Custom Report 옵션을 선택하고 Next 를 클릭한다. Output Path(출력 경로)와 Report Name(보고서 이름)을 지정한 후 Finish 를 클릭한다. Progress Status 진행 창이 나타나는지 확인한다. 완료 후 “보고서를 볼지” 묻는 메시지가 뜨면 예(Y) 를 선택한다. 지정한 출력 경로가 메모장으로 열려 안내된다. 그림 3. GenomeStudio PLINK 플러그인/리포트 화면 생성물 확인 표시된 출력 위치로 이동한다. 폴더명 규칙: PLINK_분석날짜_시간 (예: PLINK_120825_0322) 해당 폴더 안에 다음 파일이 생성되었는지 확인한다. NIAS_ibv3_296ea.ped — 유전자형 데이터 NIAS_ibv3_296ea.map — 마커 위치 데이터 기타 NIAS_ibv3_296ea.bat — PLINK 분석 실행용 배치 파일 기타 NIAS_ibv3_296ea.script — 입력 매개변수 스크립트 ✅ 위 두 파일(.ped, .map)이 준비되면, 이후 PLINK/PLINK2 명령으로 본격적인 GWAS 전처리를 진행할 수 있다!  .ped 파일 ️ .map 파일 개체 유전자형 정보 (.ped) 구조: 처음 6개 열(FID, IID, PID, MID, SEX, PHENO)은 고정 정보이며, 그 뒤로 각 마커(SNP)의 대립유전자 쌍(예: A G)이 반복된다. 구분자: 모든 값은 공백(스페이스)으로 구분되며, 헤더(제목 줄)가 없다. 결측치: 유전자형을 알 수 없는 경우, 대립유전자를 0으로 표기 (즉, 0 0). 마커 위치 정보 (.map) 구조: 4개의 열로 고정되어 있다: 염색체 (CHR), 마커 ID (SNP_ID), 유전 거리 (CM), 물리적 위치 (BP). 구분자: 공백 또는 탭으로 구분되며, 헤더가 없다. 참고: CHR=0 또는 BP=0은 해당 마커의 위치 정보를 모른다는 의미. 1.2 Phenotype data (표현형 데이터) 준비 제공된 NIAS_ibv3_296ea_pheno.csv 파일을 이용한다. Figure 1.1: 표현형 데이터 파일 (NIAS_ibv3_296ea_pheno.csv) 1.3 R/Rstudio 프로그램 다운로드 및 설치 3.1 R 프로그램 다운로드 및 설치 먼저 데이터 분석의 핵심 엔진인 R을 설치한다. 사이트 접속: https://www.r-project.org/ R 공식 사이트 열기 그림 1. R 다운로드 페이지 홈페이지에서 download R을 클릭하여 CRAN Mirrors 페이지로 이동. 스크롤을 아래로 내려 Korea 부분을 찾고 Korea 항목 아래의 링크를 클릭. Download R for Windows → install R for the first time → Download R-4.5.1 for Windows를 차례로 클릭하여 설치 파일을 내려받는다. 그림 2. R 설치 화면 설치 실행 안내 ① R-4.5.1-win.exe를 더블 클릭한 후 실행(R) 클릭 ② 설치 언어 선택 - 한국어 - 확인&nbsp;클릭 ③ 다음(N) 클릭 ④ 설치할 위치 선택 - 경로는 원하는 대로 지정 (찾아보기(R) 클릭) 가능 - 다음(N) 클릭 ※ 단, 경로 및 폴더 이름에는 한글이 없어야 한다! ⑤ 다음(N) 클릭 ⑥ 다음(N) 클릭 그림 3. R 설치 화면 ⑦ 다음(N) 클릭 ⑧ 다음(N) 클릭 ※ 레지스트리 항목들은 모두 체크되어 있어야 한다. ⑨ 설치가 다 진행될 때까지 대기 ⑩ 완료(F) 클릭 3.2 RStudio 프로그램 다운로드 및 설치 다음으로 R을 더 편리하게 사용할 수 있도록 도와주는 통합 개발 환경(IDE)인 RStudio를 설치한다. 사이트 접속: https://posit.co/download/rstudio-desktop/ Posit 사이트 열기 그림 4. RStudio 다운로드 및 설치 화면 설치 실행 안내 ① DOWNLOAD RSTUDIO DESKTOP FOR WINDOWS를 클릭하면 RStudio-2025.05.1.-513.exe 파일이 다운로드 된다. ② RStudio-2025.05.1.-513.exe 파일을 더블클릭하여 실행(R) 클릭 ③ 다음(N) 클릭 ④ 설치 위치 선택 - 경로는 원하는 대로 지정 (찾아보기 클릭) 가능 – 설치 클릭 ⑤ 설치가 다 진행될 때 까지 대기 ⑥ 마침 클릭 3.3 RStudio 시작 화면 고정(바로가기) 설치를 마친 뒤, RStudio를 빠르게 실행할 수 있도록 Windows 시작 화면에 고정한다. RStudio가 설치된 폴더로 이동하여 rstudio.exe 클릭한 후 마우스 오른쪽 버튼을 눌러 시작화면에 고정을 클릭하면 아래와 같이 시작 - rstudio 프로그램이 보인다. 그림 5. Windows 시작 화면에 고정된 RStudio 3.4 RStudio 기본 화면과 패널 소개 기본 화면: rstudio를 실행하면 아래와 같이 4개의 패널(main panes)로 구성된 기본 화면이 열린다. 패널 재설정: 메뉴에서 View &gt; Panes &gt; Reset Pane Layout을 선택하면 기본 레이아웃으로 재설정할 수 있다. 그림 6. RStudio 기본 레이아웃(4개 패널) ① Source Pane ② Console / Terminal Pane ③ Environment / History Pane ④ Files / Plots / Packages / Help Pane 소스 패널: 스크립트와 문서를 편집하는 영역. R 스크립트(.R) 편집 및 실행. 다른 코드 파일(예: Python, Shell)도 탭으로 열어 편집 가능. 탭 상단의 Run, Source 버튼으로 코드 실행. 콘솔/터미널 패널: 코드 실행 및 시스템 쉘 접근. Console: R이 실제로 실행되는 곳. &gt; 프롬프트에서 명령을 입력하면 결과, 경고, 오류가 즉시 출력된다. Terminal: RStudio 안에서 명령줄(쉘)을 사용할 수 있다. 기본은 Windows CMD이며, Terminal Options에서 PowerShell, Bash(WSL) 등으로 변경 가능. Background Jobs: 오래 걸리는 작업을 백그라운드로 실행하고 상태/로그를 확인. 환경/기록 패널: 객체 관리와 명령 이력 확인. Environment: 현재 작업 공간의 객체(변수, 데이터 프레임, 함수)를 나열. 아이템 클릭으로 미리보기 가능, 빗자루 아이콘으로 객체 삭제 가능. History: 콘솔에서 실행한 모든 명령의 로그. 검색/복사/재실행 가능. 파일/플롯/패키지/도움말 패널: 프로젝트 리소스 관리와 문서 탐색. Files: 프로젝트 디렉터리 탐색, 파일 열기/관리. 기본 작업 디렉터리(Windows) 참고: R과 RStudio의 홈 디렉터리(~)는 다음 우선순위로 결정된다: R_USER &rarr; HOME &rarr; 사용자 문서 폴더 예: C:\\Users\\YourUsername\\Documents. Plots: 코드로 생성된 그래프 표시. 확대/내보내기/지우기 가능. Packages: 설치된 패키지 목록, 설치/업데이트, 세션 로드. Help: ?함수이름 또는 검색으로 함수/패키지 문서 확인. RStudio 패널에서의 기본 작업 흐름 좌상단 Source Pane에서 코드 작성 코드를 선택 후 Ctrl+Enter 또는 Run으로 실행 → 좌하단 Console에서 수행 생성된 객체는 우상단 Environment에서 확인 그래프는 우하단 Plots에 표시, 파일은 Files에서 관리 /* 활성 탭 라벨 하이라이트 */ #tab-source:checked ~ .rd-tabs__nav label[for=\"tab-source\"], #tab-console:checked ~ .rd-tabs__nav label[for=\"tab-console\"], #tab-env:checked ~ .rd-tabs__nav label[for=\"tab-env\"], #tab-files:checked ~ .rd-tabs__nav label[for=\"tab-files\"] { background: #f8f9fa; box-shadow: 0 2px 6px rgba(0,0,0,.04); } /* 탭 패널 토글 */ #tab-source:checked ~ .rd-tabs__panels #panel-source { display:block !important; } #tab-source:checked ~ .rd-tabs__panels #panel-console, #tab-source:checked ~ .rd-tabs__panels #panel-env, #tab-source:checked ~ .rd-tabs__panels #panel-files { display:none !important; } #tab-console:checked ~ .rd-tabs__panels #panel-console { display:block !important; } #tab-console:checked ~ .rd-tabs__panels #panel-source, #tab-console:checked ~ .rd-tabs__panels #panel-env, #tab-console:checked ~ .rd-tabs__panels #panel-files { display:none !important; } #tab-env:checked ~ .rd-tabs__panels #panel-env { display:block !important; } #tab-env:checked ~ .rd-tabs__panels #panel-source, #tab-env:checked ~ .rd-tabs__panels #panel-console, #tab-env:checked ~ .rd-tabs__panels #panel-files { display:none !important; } #tab-files:checked ~ .rd-tabs__panels #panel-files { display:block !important; } #tab-files:checked ~ .rd-tabs__panels #panel-source, #tab-files:checked ~ .rd-tabs__panels #panel-console, #tab-files:checked ~ .rd-tabs__panels #panel-env { display:none !important; } 3.5 R Project 설정(Existing Directory) R Project란? “하나의 폴더 = 하나의 작업 단위(프로젝트)”로 관리해 주는 기능으로, 프로젝트마다 작업 디렉토리와 설정이 자동으로 고정된다. 사전 준비: 유전자형/표현형 데이터를 작업할 폴더에 구성한다(사용자마다 경로는 다를 수 있음). G:\\Rhome\\ └─ NIAS_ibv3_296ea\\ (폴더 새로 생성) ├─ PLINK_120825_0322\\ ← (복사) └─ NIAS_ibv3_296ea_pheno.csv ← (복사) └─ ... ← 분석 관련 파일들 그림 8. 작업할 디렉토리 및 파일 복사 그림 8. R Project 생성 화면 설정 단계 ① RStudio &rarr; File &gt; New Project &gt; Existing Directory 클릭 ② Browse 클릭 &rarr; G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 선택 후 Open ③ 새로 생성된 .Rproj 파일이 열리면서, 우하단 Files/Plots/Packages/Help 패널의 Files 탭 기준 경로(작업 디렉토리)가 프로젝트 파일이 생성된 위치로 자동 설정된다. 프로젝트 디렉토리 이름(예: PLINK_120825_0322)이 프로젝트 파일명으로 자동 지정된다. 작업 팁 프로젝트 파일 code>.Rproj를 열면 working directory가 자동 설정되므로, setwd()를 별도로 호출할 필요가 없다. 데이터/스크립트/결과물을 프로젝트 폴더 내부에 두고, 상대 경로(예: data/file.csv)를 사용하는 것이 재현성에 유리하다. 프로젝트 최상단에 README.md나 scripts/, data/, output/ 폴더와 같이 나눠 두면 관리가 쉬워진다. 1.4 plink2 프로그램 다운로드 및 설치 목표: 최신 plink2 실행 파일을 내려받아 압축 해제 후, PATH에 등록하고 RStudio 터미널에서 동작을 확인한다. 사이트 접속: https://www.cog-genomics.org/plink/2.0/ plink2 사이트 열기 그림 1. 윈도우용 plink2 다운로드 페이지 ① https://www.cog-genomics.org/plink/2.0/ 접속 ② Alpha 6.21 (6 Aug) build에서 자신의 시스템에 맞는 빌드(Windows 64-bit 또는 32-bit) 클릭 → plink2_win64_20250806.zip 파일이 다운로드된다. 참고: Alpha 6.23 (24 Aug)로 업데이트됨 (2025.9.5.기준) 최신 빌드를 선택하면 파일명이 plink2_win64_20250824.zip처럼 날짜가 달라질 수 있다. Windows 10/11에서 시스템 종류 확인 시작 버튼 클릭 → ⚙ 설정(Settings) 시스템(System) → 정보(About) 디바이스 사양(Device specifications)의 시스템 종류(System type) 확인 예: 64비트 운영 체제, x64 기반 프로세서 → 64-bit 빌드 예: 32비트 운영 체제, x86 기반 프로세서 → 32-bit 빌드 ③ 다운로드한 압축 파일(plink2_win64_20250806.zip)의 압축을 풀면 plink2.exe 및 vcf_subset.exe가 생성된다. ④ plink2.exe가 있는 경로를 시스템 환경 변수 PATH에 추가한다. 유전체 매뉴얼 v6 p.69~73 참조 PATH 추가 간단 가이드 (요약) 제어판 또는 설정의 고급 시스템 설정 &gt; 환경 변수에서 시스템 변수의 Path 편집 → plink2.exe가 있는 폴더 경로 추가 → 확인. ⑤ RStudio를 연 뒤, 좌하단 Console/Terminal 패널의 Terminal 탭에서 plink2를 입력하여 실행되는지 확인한다 (또는 plink2 --version 입력). 그림 2. RStudio Terminal에서 plink2 동작 확인 1.5 R package 설치 PLINK_120825_0322.Rproj파일을 더블 클릭하면 RStudio가 자동으로 열린다. 분석에 필요한 R package들을 설치하기 위해 다음의 R script를 실행한다. .ui-badge{ font-weight:700; background:#f8f9fa; border:1px solid #e2e6ea; padding:.1rem .45rem; border-radius:.35rem; } .ui-kbd{ color:#212529 !important; /* 전역 CSS가 kbd를 하얗게 덮어써도 보이게 */ background:#f8f9fa; border:1px solid #e2e6ea; border-bottom-width:2px; padding:.05rem .35rem; border-radius:.25rem; font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, 'Liberation Mono', monospace; font-size:.95em; } .ui-btn{ display:inline-block; padding:.1rem .55rem; border:1px solid #dee2e6; border-radius:.35rem; background:#e9f5ff; font-weight:700; } 분석에 필요한 R package 설치 스크립트 아래 R 코드를 복사한 후 Source Pane 에 붙여넣고 실행( Ctrl + Enter 또는 Run 클릭)하면, 분석에서 사용하는 패키지를 자동으로 검사 → 설치 → 로딩한다. # ------------------------------------------------------------ # R package one-shot installer for this document # - CRAN: install.packages() # - Bioconductor: BiocManager::install() # ------------------------------------------------------------ # 0) 권장 CRAN 미러 설정 및 병렬 빌드 코어 설정 options(repos = c(CRAN = &quot;https://cloud.r-project.org&quot;)) NCPU &lt;- max(1L, parallel::detectCores(logical = TRUE) - 1L) # 1) R 스크립트 전반에 실제로 사용되는 패키지 목록 cran_pkgs &lt;- c( &quot;readr&quot;,&quot;dplyr&quot;,&quot;ggplot2&quot;,&quot;tibble&quot;,&quot;stringr&quot;, &quot;qqman&quot;,&quot;CMplot&quot;,&quot;genio&quot;,&quot;sommer&quot;,&quot;lme4breeding&quot; ) bioc_pkgs &lt;- c( &quot;GENESIS&quot;,&quot;GWASTools&quot;,&quot;BiocParallel&quot; ) # 2) BiocManager 준비 if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) { install.packages(&quot;BiocManager&quot;, Ncpus = NCPU) } # 3) 설치 헬퍼 install_if_missing &lt;- function(pkgs, installer, ...) { need &lt;- pkgs[!vapply(pkgs, requireNamespace, logical(1), quietly = TRUE)] if (length(need)) { message(&quot;Installing: &quot;, paste(need, collapse = &quot;, &quot;)) installer(need, ask = FALSE, Ncpus = NCPU, ...) } else { message(&quot;All already installed: &quot;, paste(pkgs, collapse = &quot;, &quot;)) } } # 4) 설치 실행 install_if_missing(cran_pkgs, install.packages) install_if_missing(bioc_pkgs, BiocManager::install, update = FALSE) # 5) 로딩 &amp; 버전 리포트 all_pkgs &lt;- c(cran_pkgs, bioc_pkgs) invisible(lapply(all_pkgs, function(p) suppressPackageStartupMessages( library(p, character.only = TRUE) ))) ver &lt;- vapply(all_pkgs, function(p) as.character(utils::packageVersion(p)), character(1)) pkg_df &lt;- data.frame( package = all_pkgs, version = ver, check.names = FALSE, stringsAsFactors = FALSE ) print(pkg_df, row.names = FALSE) #&gt; package version #&gt; readr 2.1.5 #&gt; dplyr 1.1.4 #&gt; ggplot2 3.5.2 #&gt; tibble 3.3.0 #&gt; stringr 1.5.1 #&gt; qqman 0.1.9 #&gt; CMplot 4.5.1 #&gt; genio 1.1.2 #&gt; sommer 4.4.3 #&gt; lme4breeding 1.0.70 #&gt; GENESIS 2.38.0 #&gt; GWASTools 1.54.0 #&gt; BiocParallel 1.42.1 1.6  GWAS 분석 사전 준비 완료 ✅ R 기반 GWAS 사전 준비를 성공적으로 마쳤다! "],["pre-gwas-절차-유전자형-데이터-qc.html", "2 Pre-GWAS 절차: 유전자형 데이터 QC 2.1 [RStudio Terminal] 전체 유전자형 데이터 QC 워크플로우 2.2 품종별 QC 리포트 활용 2차 필터 기준값 정하기 2.3 최종 PLINK1 Binary 세트 다시 만들기 2.4  QC 과정 완료 2.5 스크립트 전체 보기", " 2 Pre-GWAS 절차: 유전자형 데이터 QC 개요  GWAS 분석을 위한 유전자형 데이터 QC 워크플로우 (Windows RStudio + PLINK2 + awk) 유전자형 데이터 변환 (PED/MAP → PGEN) REF/ALT allele 오류 변이 제거 1차 필터 적용 (autosomes + X, biallelic, monomorphic 제거, 중복 제거) 품종별 IID 목록 준비 및 데이터셋 분리 품종별 QC 리포트 생성 (missingness, HWE, allele frequency) RStudio에서 품종별 QC 리포트 확인 및 2차 필터 값 결정 품종별 2차 필터 적용 및 최종 유전자형 세트 생성 (PLINK1 binary) 2.1 [RStudio Terminal] 전체 유전자형 데이터 QC 워크플로우 아래 단계들은 모두 R 콘솔이 아니라 RStudio의 Terminal 탭에서 실행한다. RStudio 화면 하단의 Console 옆 Terminal 탭을 클릭 Windows에서는 cmd.exe 또는 PowerShell이 자동 실행되며, Mac/Linux에서는 bash/zsh 셸이 열림 각 단계의 코드 블록 우측 상단의 복사 버튼을 눌러 복사한 뒤, Terminal 탭의 &gt; 옆에 마우스 오른쪽 버튼을 클릭 한 후 Paste를 클릭하고 Enter를 누르면 실행 실행 결과물은 각 단계의 “생성되는 출력 파일” 설명에 따라 확인 2.1.1 0) 결과 저장 디렉터리 준비 작업 전 단계별 결과를 저장할 디렉토리 생성  0) 출력 폴더 생성 (전체 데이터셋) mkdir 00_import 01_autosomesX 02_reports 03_qc 04_split 생성되는 폴더: 00_import/, 01_autosomesX/, 02_reports/, 03_qc/, 04_split/ 2.1.2 1) 원본 PED/MAP을 PLINK2 PGEN 세트로 변환 PLINK1 형식(PED/MAP)을 PLINK2 형식(PGEN/PVAR/PSAM)으로 변환  1) PED/MAP → PGEN 변환 (전체 데이터셋) plink2 --cow --pedmap NIAS_ibv3_296ea --sort-vars --make-pgen --out 00_import/NIAS_ibv3_296ea 생성되는 출력 파일: 00_import/NIAS_ibv3_296ea.[pgen|pvar|psam]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --cow --make-pgen --out 00_import\\NIAS_ibv3_296ea --pedmap NIAS_ibv3_296ea --sort-vars Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Wed Aug 20 16:53:23 2025 Random number seed: 1755676403 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). --pedmap: 53218 variants in .map file. --pedmap: 296 samples present, genotypes extracted to 00_import\\NIAS_ibv3_296ea-temporary.bed.smaj . Transposing sample-major .bed to 00_import\\NIAS_ibv3_296ea-temporary.pgen , and setting major alleles to provisional-REF. Transpose complete. --pedmap: 00_import\\NIAS_ibv3_296ea-temporary.pgen + 00_import\\NIAS_ibv3_296ea-temporary.pvar + 00_import\\NIAS_ibv3_296ea-temporary.psam written. .bed.smaj and .fam.tmp temporary files deleted. 296 samples (0 females, 0 males, 296 ambiguous; 296 founders) loaded from 00_import\\NIAS_ibv3_296ea-temporary.psam. 53218 variants loaded from 00_import\\NIAS_ibv3_296ea-temporary.pvar. Note: No phenotype data present. Writing 00_import\\NIAS_ibv3_296ea.pvar ... done. Writing 00_import\\NIAS_ibv3_296ea.psam ... done. Writing 00_import\\NIAS_ibv3_296ea.pgen ... done. End time: Wed Aug 20 16:53:24 2025 2.1.3 2) REF/ALT . 오류 변이 제거 REF 및 ALT allele이 .으로 지정된 변이를 제거한 데이터셋 생성  2-1) REF/ALT가 모두 ‘.’ 인 변이 전체 행 추출 (awk) awk -F '\\t' \"NR&gt;1 &amp;&amp; $4==\\\".\\\" &amp;&amp; $5==\\\".\\\"\" 00_import/NIAS_ibv3_296ea.pvar &gt; bad_refalt_ids_both_strict.txt 생성되는 출력 파일: bad_refalt_ids_both_strict.txt  bad_refalt_ids_both_strict.txt —  클릭하여 보기 0 0 BTA-91057-no-rs . . 0 2 104844698 ARS-BFGL-NGS-40237 . . 117.9899 3 47820211 BTB-00462798 . . 70.45705 3 86433347 ARS-BFGL-NGS-11769 . . 109.0945 3 120031577 BTB-01714430 . . 126.98 6 108805685 Hapmap39313-BTA-121776 . . 112.8388 13 21528917 ARS-BFGL-NGS-59624 . . 1.695824 15 49076839 ARS-BFGL-BAC-20572 . . 47.92302 15 57434389 ARS-BFGL-BAC-19997 . . 54.28989 19 27444684 ARS-BFGL-NGS-38067 . . 48.69351 23 39274007 BovineHD2300011347 . . 0 X 98185142 ARS-BFGL-NGS-2544 . . 99.77262 Y 0 BovineHD3100000048 . . 0 Y 0 BovineHD3100000210 . . 0 Y 0 BovineHD3100000515 . . 0 Y 0 BovineHD3100000517 . . 0 Y 0 BovineHD3100001404 . . 0  2-2) 문제 변이의 ID만 추출 (awk) awk -F '\\t' \"NR&gt;1 &amp;&amp; $4==\\\".\\\" &amp;&amp; $5==\\\".\\\" {print $3}\" 00_import/NIAS_ibv3_296ea.pvar &gt; bad_refalt_ids.txt 생성되는 출력 파일: bad_refalt_ids.txt  bad_refalt_ids.txt —  클릭하여 보기 BTA-91057-no-rs ARS-BFGL-NGS-40237 BTB-00462798 ARS-BFGL-NGS-11769 BTB-01714430 Hapmap39313-BTA-121776 ARS-BFGL-NGS-59624 ARS-BFGL-BAC-20572 ARS-BFGL-BAC-19997 ARS-BFGL-NGS-38067 BovineHD2300011347 ARS-BFGL-NGS-2544 BovineHD3100000048 BovineHD3100000210 BovineHD3100000515 BovineHD3100000517 BovineHD3100001404  2-3) 문제 변이를 제외한 pfile 생성 (전체 데이터셋) plink2 --pfile 00_import/NIAS_ibv3_296ea --exclude bad_refalt_ids.txt --make-pgen --out 00_import/NIAS_ibv3_296ea.clean 생성되는 출력 파일: 00_import/NIAS_ibv3_296ea.clean.[pgen|pvar|psam]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --exclude bad_refalt_ids.txt --make-pgen --out 00_import/NIAS_ibv3_296ea.clean --pfile 00_import/NIAS_ibv3_296ea Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Wed Aug 20 16:53:24 2025 Random number seed: 1755676404 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 296 samples (0 females, 0 males, 296 ambiguous; 296 founders) loaded from 00_import/NIAS_ibv3_296ea.psam. chrSet header line: 29 autosome pairs. 53218 variants loaded from 00_import/NIAS_ibv3_296ea.pvar. Note: No phenotype data present. --exclude: 53201 variants remaining. 53201 variants remaining after main filters. Writing 00_import/NIAS_ibv3_296ea.clean.psam ... done. Writing 00_import/NIAS_ibv3_296ea.clean.pvar ... done. Writing 00_import/NIAS_ibv3_296ea.clean.pgen ... done. End time: Wed Aug 20 16:53:25 2025 2.1.4 3) 1차 필터 적용 Autosomes + X 염색체만 남기고, 다대립성/단일형/중복 변이 제거  3) Autosomes + X, biallelic only, no monomorphic or duplicate variants (전체 데이터셋) plink2 --pfile 00_import/NIAS_ibv3_296ea.clean --chr 1-29,X --max-alleles 2 --mac 1 --rm-dup force-first --sort-vars --make-pgen --out 01_autosomesX/NIAS_ibv3_296ea.autosomesX 생성되는 출력 파일: 01_autosomesX/NIAS_ibv3_296ea.autosomesX.[pgen|pvar|psam]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --chr 1-29,X --mac 1 --make-pgen --max-alleles 2 --out 01_autosomesX/NIAS_ibv3_296ea.autosomesX --pfile 00_import/NIAS_ibv3_296ea.clean --rm-dup force-first --sort-vars Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Wed Aug 20 16:53:25 2025 Random number seed: 1755676405 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 296 samples (0 females, 0 males, 296 ambiguous; 296 founders) loaded from 00_import/NIAS_ibv3_296ea.clean.psam. chrSet header line: 29 autosome pairs. 52424 out of 53201 variants loaded from 00_import/NIAS_ibv3_296ea.clean.pvar. Note: No phenotype data present. Note: Skipping --rm-dup since no duplicate IDs are present. Calculating allele frequencies... done. 4848 variants removed due to allele frequency threshold(s) (--maf/--max-maf/--mac/--max-mac). 47576 variants remaining after main filters. Writing 01_autosomesX/NIAS_ibv3_296ea.autosomesX.pvar ... done. Writing 01_autosomesX/NIAS_ibv3_296ea.autosomesX.psam ... done. Writing 01_autosomesX/NIAS_ibv3_296ea.autosomesX.pgen ... done. End time: Wed Aug 20 16:53:25 2025 2.1.5 4) 품종별 IID 목록 준비 Holstein / Jersey 개체 ID 파일을 FID IID 목록으로 매칭(PSAM 기반)  4-1) Holstein (홀스타인) IID 변환 awk \"NR==FNR {iid[$1]=1; next} FNR&gt;1 &amp;&amp; ($2 in iid) {print $1, $2}\" holstein.txt 01_autosomesX/NIAS_ibv3_296ea.autosomesX.psam &gt; holstein_ids.txt 생성되는 출력 파일: holstein_ids.txt  holstein_ids.txt —  클릭하여 보기 1 3530 2 3528 3 3527 4 3195 5 3994 ... 195 4354 196 4353 197 4352 198 4163 199 4351 200 4279  4-2) Jersey (저지) IID 변환 awk \"NR==FNR {iid[$1]=1; next} FNR&gt;1 &amp;&amp; ($2 in iid) {print $1, $2}\" jersey.txt 01_autosomesX/NIAS_ibv3_296ea.autosomesX.psam &gt; jersey_ids.txt 생성되는 출력 파일: jersey_ids.txt  jersey_ids.txt —  클릭하여 보기 201 4273 202 4284 203 4289 204 4230 205 4292 ... 292 4318 293 4317 294 4096 295 4179 296 4316 2.1.6 5) 품종별 서브셋 pfile 생성 품종별 IID 목록을 기반으로 데이터셋 분리  5-1) Holstein (홀스타인) 서브셋 plink2 --pfile 01_autosomesX/NIAS_ibv3_296ea.autosomesX --keep holstein_ids.txt --make-pgen --out 04_split/NIAS_ibv3_296ea.holstein 생성되는 출력 파일: 04_split/NIAS_ibv3_296ea.holstein.[pgen|pvar|psam]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --keep holstein_ids.txt --make-pgen --out 04_split/NIAS_ibv3_296ea.holstein --pfile 01_autosomesX/NIAS_ibv3_296ea.autosomesX Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Wed Aug 20 16:53:26 2025 Random number seed: 1755676406 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 296 samples (0 females, 0 males, 296 ambiguous; 296 founders) loaded from 01_autosomesX/NIAS_ibv3_296ea.autosomesX.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 01_autosomesX/NIAS_ibv3_296ea.autosomesX.pvar. Note: No phenotype data present. --keep: 200 samples remaining. 200 samples (0 females, 0 males, 200 ambiguous; 200 founders) remaining after main filters. Writing 04_split/NIAS_ibv3_296ea.holstein.psam ... done. Writing 04_split/NIAS_ibv3_296ea.holstein.pvar ... done. Writing 04_split/NIAS_ibv3_296ea.holstein.pgen ... done. End time: Wed Aug 20 16:53:26 2025  5-2) Jersey (저지) 서브셋 plink2 --pfile 01_autosomesX/NIAS_ibv3_296ea.autosomesX --keep jersey_ids.txt --make-pgen --out 04_split/NIAS_ibv3_296ea.jersey 생성되는 출력 파일: 04_split/NIAS_ibv3_296ea.jersey.[pgen|pvar|psam]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --keep jersey_ids.txt --make-pgen --out 04_split/NIAS_ibv3_296ea.jersey --pfile 01_autosomesX/NIAS_ibv3_296ea.autosomesX Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Wed Aug 20 16:53:26 2025 Random number seed: 1755676406 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 296 samples (0 females, 0 males, 296 ambiguous; 296 founders) loaded from 01_autosomesX/NIAS_ibv3_296ea.autosomesX.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 01_autosomesX/NIAS_ibv3_296ea.autosomesX.pvar. Note: No phenotype data present. --keep: 96 samples remaining. 96 samples (0 females, 0 males, 96 ambiguous; 96 founders) remaining after main filters. Writing 04_split/NIAS_ibv3_296ea.jersey.psam ... done. Writing 04_split/NIAS_ibv3_296ea.jersey.pvar ... done. Writing 04_split/NIAS_ibv3_296ea.jersey.pgen ... done. End time: Wed Aug 20 16:53:26 2025 2.1.7 6) 2차 필터 적용 및 최종 데이터셋 생성 통용되는 QC 기준값을 적용하여 최종 PLINK1 binary 파일 생성 mind = 0.05, geno = 0.05, hwe = 1e-6, maf = 0.05  6-1) Holstein (홀스타인) plink2 --pfile 04_split/NIAS_ibv3_296ea.holstein --mind 0.05 --geno 0.05 --maf 0.05 --hwe 1e-6 --make-bed --out 03_qc/NIAS_ibv3_296ea.holstein 생성되는 출력 파일: 03_qc/NIAS_ibv3_296ea.holstein.[bed|bim|fam]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --geno 0.05 --hwe 1e-6 --maf 0.05 --make-bed --mind 0.05 --out 03_qc/NIAS_ibv3_296ea.holstein --pfile 04_split/NIAS_ibv3_296ea.holstein Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Mon Aug 25 19:11:34 2025 Random number seed: 1756116694 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 200 samples (0 females, 0 males, 200 ambiguous; 200 founders) loaded from 04_split/NIAS_ibv3_296ea.holstein.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 04_split/NIAS_ibv3_296ea.holstein.pvar. Note: No phenotype data present. Calculating sample missingness rates... done. 0 samples removed due to missing genotype data (--mind). 200 samples (0 females, 0 males, 200 ambiguous; 200 founders) remaining after main filters. Calculating allele frequencies... done. --geno: 193 variants removed due to missing genotype data. --hwe: 37 variants removed due to Hardy-Weinberg exact test (founders only). 5732 variants removed due to allele frequency threshold(s) (--maf/--max-maf/--mac/--max-mac). 41614 variants remaining after main filters. Writing 03_qc/NIAS_ibv3_296ea.holstein.fam ... done. Writing 03_qc/NIAS_ibv3_296ea.holstein.bim ... done. Writing 03_qc/NIAS_ibv3_296ea.holstein.bed ... done. End time: Mon Aug 25 19:11:34 2025  6-2) Jersey (저지) plink2 --pfile 04_split/NIAS_ibv3_296ea.jersey --mind 0.05 --geno 0.05 --maf 0.05 --hwe 1e-6 --make-bed --out 03_qc/NIAS_ibv3_296ea.jersey 생성되는 출력 파일: 03_qc/NIAS_ibv3_296ea.jersey.[bed|bim|fam]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --geno 0.05 --hwe 1e-6 --maf 0.05 --make-bed --mind 0.05 --out 03_qc/NIAS_ibv3_296ea.jersey --pfile 04_split/NIAS_ibv3_296ea.jersey Hostname: RDA Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Mon Aug 25 19:11:40 2025 Random number seed: 1756116700 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 96 samples (0 females, 0 males, 96 ambiguous; 96 founders) loaded from 04_split/NIAS_ibv3_296ea.jersey.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 04_split/NIAS_ibv3_296ea.jersey.pvar. Note: No phenotype data present. Calculating sample missingness rates... done. 0 samples removed due to missing genotype data (--mind). 96 samples (0 females, 0 males, 96 ambiguous; 96 founders) remaining after main filters. Calculating allele frequencies... done. --geno: 154 variants removed due to missing genotype data. --hwe: 18 variants removed due to Hardy-Weinberg exact test (founders only). 12329 variants removed due to allele frequency threshold(s) (--maf/--max-maf/--mac/--max-mac). 35075 variants remaining after main filters. Writing 03_qc/NIAS_ibv3_296ea.jersey.fam ... done. Writing 03_qc/NIAS_ibv3_296ea.jersey.bim ... done. Writing 03_qc/NIAS_ibv3_296ea.jersey.bed ... done. End time: Mon Aug 25 19:11:40 2025  최종 PLINK1 Binary 세트 한눈에 보기 .bed — Binary genotype file 각 SNP × 개체의 유전자형 정보를 이진(binary) 형태로 저장 (압축 효율적). .bim — Variant information 각 변이의 염색체, SNP ID, 위치, 대립유전자(ref/alt) 정보를 포함. .fam — Sample information 각 개체의 FID/IID, 부·모 ID, 성별, phenotype(형질) 정보를 저장. 2.2 품종별 QC 리포트 활용 2차 필터 기준값 정하기 ℹ️ 품종별 PLINK2 QC 리포트 만들기 및 리뷰: PLINK2 QC 보고서(.smiss, .vmiss, .hardy, .afreq) 생성 RStudio로 QC 보고서 파일 불러오기 및 미리보기 샘플별/SNP별 유전자형 결측률(missingness), 하디–바인베르크 평형(HWE), 소수 대립유전자 빈도(MAF)를 품종별로 시각화 기준미달 샘플 및 변이 정보 CSV 작성 및 기준 미달 SNP에 대한 통합 요약 생성 2.2.1 1) [RStudio Terminal] 품종별 QC 리포트 출력  Holstein (홀스타인) plink2 --pfile 04_split/NIAS_ibv3_296ea.holstein --missing --hardy --freq --out 02_reports/holstein/NIAS_ibv3_296ea.holstein.autosomesX 생성되는 출력 파일: 02_reports/holstein/NIAS_ibv3_296ea.holstein.autosomesX.[smiss|vmiss|hardy|afreq]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --freq --hardy --missing --out 02_reports\\holstein\\NIAS_ibv3_296ea.holstein.autosomesX --pfile 04_split\\NIAS_ibv3_296ea.holstein Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Wed Aug 20 16:53:27 2025 Random number seed: 1755676407 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 200 samples (0 females, 0 males, 200 ambiguous; 200 founders) loaded from 04_split\\NIAS_ibv3_296ea.holstein.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 04_split\\NIAS_ibv3_296ea.holstein.pvar. Note: No phenotype data present. Calculating sample missingness rates... done. Calculating allele frequencies... done. --freq: Allele frequencies (founders only) written to 02_reports\\holstein\\NIAS_ibv3_296ea.holstein.autosomesX.afreq . --missing: Sample missing data report written to 02_reports\\holstein\\NIAS_ibv3_296ea.holstein.autosomesX.smiss . --missing: Variant missing data report written to 02_reports\\holstein\\NIAS_ibv3_296ea.holstein.autosomesX.vmiss . --hardy: Skipping 887 haploid variants. --hardy: Autosomal Hardy-Weinberg report (founders only) written to 02_reports\\holstein\\NIAS_ibv3_296ea.holstein.autosomesX.hardy . End time: Wed Aug 20 16:53:27 2025  Jersey (저지) plink2 --pfile 04_split/NIAS_ibv3_296ea.jersey --missing --hardy --freq --out 02_reports/jersey/NIAS_ibv3_296ea.jersey.autosomesX 생성되는 출력 파일: 02_reports/jersey/NIAS_ibv3_296ea.jersey.autosomesX.[smiss|vmiss|hardy|afreq]  PLINK2 run log —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --freq --hardy --missing --out 02_reports\\jersey\\NIAS_ibv3_296ea.jersey.autosomesX --pfile 04_split\\NIAS_ibv3_296ea.jersey Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Wed Aug 20 16:53:27 2025 Random number seed: 1755676407 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 96 samples (0 females, 0 males, 96 ambiguous; 96 founders) loaded from 04_split\\NIAS_ibv3_296ea.jersey.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 04_split\\NIAS_ibv3_296ea.jersey.pvar. Note: No phenotype data present. Calculating sample missingness rates... done. Calculating allele frequencies... done. --freq: Allele frequencies (founders only) written to 02_reports\\jersey\\NIAS_ibv3_296ea.jersey.autosomesX.afreq . --missing: Sample missing data report written to 02_reports\\jersey\\NIAS_ibv3_296ea.jersey.autosomesX.smiss . --missing: Variant missing data report written to 02_reports\\jersey\\NIAS_ibv3_296ea.jersey.autosomesX.vmiss . --hardy: Skipping 887 haploid variants. --hardy: Autosomal Hardy-Weinberg report (founders only) written to 02_reports\\jersey\\NIAS_ibv3_296ea.jersey.autosomesX.hardy . End time: Wed Aug 20 16:53:28 2025 ⚙️ 사용된 PLINK2 인자(arguments) --pfile PREFIX PGEN 데이터셋 불러오기 (PREFIX.pgen/pvar/psam). --missing 유전자형 결측 비율 계산 (.smiss 및 .vmiss 파일 생성). --hardy 하디–바인베르크 exact test 검정 실행 (상염색체 → .hardy, X 염색체 → .hardy.x). --freq 대립유전자 빈도 계산 (.afreq 파일 생성). --out PREFIX 출력 경로/접두어 지정 (디렉터리는 미리 존재해야 함).  PLINK2 QC 리포트 한눈에 보기 .smiss — 샘플 결측률 개체별 유전자형 미호출 비율 (F_MISS by sample). .vmiss — 변이 결측률 변이별 유전자형 미호출 비율 (전체 샘플 기준, F_MISS by SNP). .hardy / .hardy.x — 하디–바인베르크 평형 검정 Hardy–Weinberg exact test 검정 P값 (상염색체 / X 염색체). .afreq — 대립유전자 빈도 변이별 대체(ALT) 대립유전자 빈도 (.pvar 파일의 대립유전자 사용; ALT는 소수 대립유전자(minor allele)가 아닐 수 있어서 빈도가 0.5 이상일 수도 있음). 2.2.2 2) [RStudio Console] 설정 # 품종별 기본 QC 보고서 # --------------------------------------------------- # ---- 필요한 패키지 설치 및 불러오기---- need &lt;- c(&quot;readr&quot;,&quot;dplyr&quot;,&quot;ggplot2&quot;) to_install &lt;- setdiff(need, rownames(installed.packages())) if (length(to_install)) install.packages(to_install, repos = &quot;https://cloud.r-project.org&quot;) invisible(lapply(need, library, character.only = TRUE)) # ---- 보조 함수 &amp; 기준값(=필터링 기준) ---- neglog10 &lt;- function(p) -log10(pmax(p, .Machine$double.xmin)) # -Inf 방지 # 이대립성(biallelic) 데이터의 MAF: ALT_FREQS 사용 # plink2 --freq의 ALT는 기본적으로 비참조 대립유전자(.pvar 파일에서 정의된 ALT)이며, 소수 대립유전자(minor allele)가 아닐 수도 있음. maf_from_afreq &lt;- function(df) { stopifnot(&quot;ALT_FREQS&quot; %in% names(df)) df %&gt;% mutate( # 숫자형으로 변환 후 [0,1] 범위로 보정 ALT_FREQS = suppressWarnings(as.numeric(ALT_FREQS)), ALT_FREQS = pmin(pmax(ALT_FREQS, 0), 1), MAF_calc = pmin(ALT_FREQS, 1 - ALT_FREQS) ) } # ---- 기준값 (필요 시 조정) ---- mind_thr &lt;- 0.05 # 개체 단위 유전자형 결측률 geno_thr &lt;- 0.05 # 변이 단위 유전자형 결측률 hwe_thr &lt;- 1e-6 # 하디–바인베르크(HWE) p-값 maf_thr &lt;- 0.05 # 소수 대립유전자 빈도(MAF) # ---- 기본 경로 &amp; 품종 구분(서브디렉토리 설정용) ---- base_dir &lt;- &quot;02_reports&quot; breeds &lt;- c(&quot;holstein&quot;,&quot;jersey&quot;)  실행 파라미터 — 클릭하여 보기 기본 디렉터리 (base_dir) 02_reports 품종 목록 (breeds) holstein, jersey 개체 단위 결측률 기준 (mind_thr) 0.05 변이 단위 결측률 기준 (geno_thr) 0.05 HWE p-값 기준 (hwe_thr) 1e-06 MAF 기준 (maf_thr) 0.05 2.2.3 3) [RStudio Console] 품종별 QC 리포트 점검 # 품종별 요약 행을 저장할 리스트 summary_rows &lt;- list() # ---- 품종별 실행 ---- # 전체 품종(breeds 벡터: &quot;holstein&quot;, &quot;jersey&quot;)을 순차적으로 처리한다. # - breeds[1] = &quot;holstein&quot; # - breeds[2] = &quot;jersey&quot; # 아래 for 루프에서 자동으로 두 품종이 반복 실행된다. # ---- 모든 품종 자동 실행 ---- for (breed in breeds) { message(&quot;=== 품종 처리 중: &quot;, breed, &quot; ===&quot;) prefix &lt;- file.path(base_dir, breed, sprintf(&quot;NIAS_ibv3_296ea.%s.autosomesX&quot;, breed)) f_smiss &lt;- paste0(prefix, &quot;.smiss&quot;) f_vmiss &lt;- paste0(prefix, &quot;.vmiss&quot;) f_hardy &lt;- paste0(prefix, &quot;.hardy&quot;) f_afreq &lt;- paste0(prefix, &quot;.afreq&quot;) out_dir &lt;- file.path(base_dir, breed) figs_dir &lt;- file.path(out_dir, &quot;figs&quot;) dir.create(figs_dir, showWarnings = FALSE, recursive = TRUE) # ---- 데이터 불러오기 ---- smiss &lt;- readr::read_tsv(f_smiss, show_col_types = FALSE) |&gt; dplyr::rename(FID = `#FID`) # &quot;#FID&quot; -&gt; FID vmiss &lt;- readr::read_tsv(f_vmiss, show_col_types = FALSE) |&gt; dplyr::rename(CHROM = `#CHROM`) hardy &lt;- readr::read_tsv(f_hardy, show_col_types = FALSE) |&gt; dplyr::rename(CHROM = `#CHROM`) |&gt; dplyr::mutate(minuslog10P = neglog10(P)) afreq &lt;- readr::read_tsv(f_afreq, show_col_types = FALSE) |&gt; dplyr::rename(CHROM = `#CHROM`) |&gt; maf_from_afreq() message(&quot;smiss 데이터 앞부분:&quot;); print(utils::head(smiss)) message(&quot;vmiss 데이터 앞부분:&quot;); print(utils::head(vmiss)) message(&quot;hardy 데이터 앞부분:&quot;); print(utils::head(hardy)) message(&quot;afreq 데이터 앞부분:&quot;); print(utils::head(afreq)) # ---- 그래프 ---- qc_theme &lt;- ggplot2::theme_minimal(base_size = 12) + ggplot2::theme( axis.title.x = ggplot2::element_text(size = 14, face = &quot;bold&quot;), axis.title.y = ggplot2::element_text(size = 14, face = &quot;bold&quot;), axis.text.x = ggplot2::element_text(size = 12), axis.text.y = ggplot2::element_text(size = 12), plot.title = ggplot2::element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5) ) p1 &lt;- ggplot2::ggplot(smiss, ggplot2::aes(x = F_MISS)) + ggplot2::geom_histogram(bins = 50) + ggplot2::geom_vline(xintercept = mind_thr) + ggplot2::labs(title = paste0(breed, &quot;: 개체 단위 결측률 (F_MISS)&quot;), x = &quot;F_MISS&quot;, y = &quot;개수&quot;) + qc_theme p2 &lt;- ggplot2::ggplot(vmiss, ggplot2::aes(x = F_MISS)) + ggplot2::geom_histogram(bins = 60) + ggplot2::geom_vline(xintercept = geno_thr) + ggplot2::labs(title = paste0(breed, &quot;: 변이 단위 결측률 (F_MISS)&quot;), x = &quot;F_MISS&quot;, y = &quot;개수&quot;) + qc_theme p3 &lt;- ggplot2::ggplot(hardy, ggplot2::aes(x = minuslog10P)) + ggplot2::geom_histogram(bins = 60) + ggplot2::geom_vline(xintercept = -log10(hwe_thr)) + ggplot2::labs(title = paste0(breed, &quot;: 하디-바인베르크 검정 (-log10P)&quot;), x = &quot;-log10(P)&quot;, y = &quot;개수&quot;) + qc_theme p4 &lt;- ggplot2::ggplot(afreq, ggplot2::aes(x = MAF_calc)) + ggplot2::geom_histogram(bins = 60) + ggplot2::geom_vline(xintercept = maf_thr) + ggplot2::labs(title = paste0(breed, &quot;: MAF 분포&quot;), x = &quot;MAF&quot;, y = &quot;개수&quot;) + qc_theme print(p1); print(p2); print(p3); print(p4) ggplot2::ggsave(file.path(figs_dir, &quot;smiss_hist.png&quot;), p1, width = 3, height = 3, dpi = 300) ggplot2::ggsave(file.path(figs_dir, &quot;vmiss_hist.png&quot;), p2, width = 3, height = 3, dpi = 300) ggplot2::ggsave(file.path(figs_dir, &quot;hardy_hist.png&quot;), p3, width = 3, height = 3, dpi = 300) ggplot2::ggsave(file.path(figs_dir, &quot;maf_hist.png&quot;), p4, width = 3, height = 3, dpi = 300) # ---- 이상치(outlier) 테이블 ---- assign(paste0(&quot;bad_samples_&quot;, breed), smiss |&gt; dplyr::filter(F_MISS &gt; mind_thr) |&gt; dplyr::select(FID, IID, F_MISS), envir = .GlobalEnv) assign(paste0(&quot;bad_snps_miss_&quot;, breed), vmiss |&gt; dplyr::filter(F_MISS &gt; geno_thr) |&gt; dplyr::select(CHROM, ID, F_MISS), envir = .GlobalEnv) assign(paste0(&quot;bad_snps_hwe_&quot;, breed), hardy |&gt; dplyr::filter(P &lt; hwe_thr) |&gt; dplyr::select(CHROM, ID, P), envir = .GlobalEnv) assign(paste0(&quot;bad_snps_maf_&quot;, breed), afreq |&gt; dplyr::filter(MAF_calc &lt; maf_thr) |&gt; dplyr::select(CHROM, ID, MAF_calc), envir = .GlobalEnv) readr::write_csv(get(paste0(&quot;bad_samples_&quot;, breed)), file.path(out_dir, paste0(&quot;bad_samples_over_mind.&quot;, breed, &quot;.csv&quot;))) readr::write_csv(get(paste0(&quot;bad_snps_miss_&quot;, breed)), file.path(out_dir, paste0(&quot;bad_snps_over_geno.&quot;, breed, &quot;.csv&quot;))) readr::write_csv(get(paste0(&quot;bad_snps_hwe_&quot;, breed)), file.path(out_dir, paste0(&quot;bad_snps_hwe.&quot;, breed, &quot;.csv&quot;))) readr::write_csv(get(paste0(&quot;bad_snps_maf_&quot;, breed)), file.path(out_dir, paste0(&quot;bad_snps_low_maf.&quot;, breed, &quot;.csv&quot;))) # ---- 품종별 변이 QC 요약 ---- vmiss &lt;- vmiss |&gt; dplyr::mutate(CHROM = as.character(CHROM)) hardy &lt;- hardy |&gt; dplyr::mutate(CHROM = as.character(CHROM)) afreq &lt;- afreq |&gt; dplyr::mutate(CHROM = as.character(CHROM)) variant_qc &lt;- vmiss |&gt; dplyr::select(CHROM, ID, F_MISS) |&gt; dplyr::left_join(dplyr::select(hardy, CHROM, ID, P), by = c(&quot;CHROM&quot;,&quot;ID&quot;)) |&gt; dplyr::left_join(dplyr::select(afreq, CHROM, ID, MAF_calc), by = c(&quot;CHROM&quot;,&quot;ID&quot;)) |&gt; dplyr::mutate( fail_miss = F_MISS &gt; geno_thr, fail_hwe = P &lt; hwe_thr, fail_maf = MAF_calc &lt; maf_thr, fail_any = fail_miss | fail_hwe | fail_maf ) readr::write_csv(variant_qc, file.path(out_dir, paste0(&quot;variant_qc_summary.&quot;, breed, &quot;.csv&quot;))) n_fail_any &lt;- sum(variant_qc$fail_any, na.rm = TRUE) n_snps_total &lt;- dplyr::n_distinct(vmiss$ID) cat(sprintf(&quot;[%s] 총 SNP 수: %s; 기준 실패 SNP 수: %s (%.2f%%)\\n\\n&quot;, breed, prettyNum(n_snps_total, big.mark = &quot;,&quot;), prettyNum(n_fail_any, big.mark = &quot;,&quot;), 100 * n_fail_any / n_snps_total)) # ---- 요약 행 ---- samples_over_mind &lt;- sum(smiss$F_MISS &gt; mind_thr, na.rm = TRUE) snps_over_geno &lt;- sum(vmiss$F_MISS &gt; geno_thr, na.rm = TRUE) snps_fail_hwe &lt;- sum(hardy$P &lt; hwe_thr, na.rm = TRUE) snps_below_maf &lt;- sum(afreq$MAF_calc &lt; maf_thr, na.rm = TRUE) summary_row &lt;- tibble::tibble( breed = breed, n_samples = nrow(smiss), n_variants = nrow(vmiss), samples_over_mind = samples_over_mind, snps_over_geno = snps_over_geno, snps_fail_hwe = snps_fail_hwe, snps_below_maf_threshold = snps_below_maf, snps_fail_any_filter = n_fail_any, pct_fail_any = round(100 * n_fail_any / nrow(vmiss), 3) ) readr::write_csv(summary_row, file.path(out_dir, &quot;qc_summary_counts.csv&quot;)) summary_rows[[breed]] &lt;- summary_row } #&gt; === 품종 처리 중: holstein === #&gt; smiss 데이터 앞부분: #&gt; # A tibble: 6 × 5 #&gt; FID IID MISSING_CT OBS_CT F_MISS #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 3530 34 47576 0.000715 #&gt; 2 2 3528 51 47576 0.00107 #&gt; 3 3 3527 35 47576 0.000736 #&gt; 4 4 3195 277 47576 0.00582 #&gt; 5 5 3994 107 47576 0.00225 #&gt; 6 6 3786 43 47576 0.000904 #&gt; vmiss 데이터 앞부분: #&gt; # A tibble: 6 × 5 #&gt; CHROM ID MISSING_CT OBS_CT F_MISS #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 Hapmap43437-BTA-101873 0 200 0 #&gt; 2 1 ARS-BFGL-NGS-16466 0 200 0 #&gt; 3 1 ARS-BFGL-NGS-105096 0 200 0 #&gt; 4 1 Hapmap34944-BES1_Contig627_1906 0 200 0 #&gt; 5 1 ARS-BFGL-NGS-98142 0 200 0 #&gt; 6 1 Hapmap53946-rs29015852 0 200 0 #&gt; hardy 데이터 앞부분: #&gt; # A tibble: 6 × 11 #&gt; CHROM ID A1 AX HOM_A1_CT HET_A1_CT TWO_AX_CT `O(HET_A1)` #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 Hapmap43437-BTA… G A 31 92 77 0.46 #&gt; 2 1 ARS-BFGL-NGS-16… G A 174 26 0 0.13 #&gt; 3 1 ARS-BFGL-NGS-10… G A 172 27 1 0.135 #&gt; 4 1 Hapmap34944-BES… C A 123 68 9 0.34 #&gt; 5 1 ARS-BFGL-NGS-98… G A 102 79 19 0.395 #&gt; 6 1 Hapmap53946-rs2… G A 94 86 20 0.43 #&gt; # ℹ 3 more variables: `E(HET_A1)` &lt;dbl&gt;, P &lt;dbl&gt;, minuslog10P &lt;dbl&gt; #&gt; afreq 데이터 앞부분: #&gt; # A tibble: 6 × 8 #&gt; CHROM ID REF ALT `PROVISIONAL_REF?` ALT_FREQS OBS_CT MAF_calc #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 Hapmap43437-… G A Y 0.615 400 0.385 #&gt; 2 1 ARS-BFGL-NGS… G A Y 0.065 400 0.065 #&gt; 3 1 ARS-BFGL-NGS… G A Y 0.0725 400 0.0725 #&gt; 4 1 Hapmap34944-… C A Y 0.215 400 0.215 #&gt; 5 1 ARS-BFGL-NGS… G A Y 0.292 400 0.292 #&gt; 6 1 Hapmap53946-… G A Y 0.315 400 0.315 #&gt; [holstein] 총 SNP 수: 47,576; 기준 실패 SNP 수: 5,962 (12.53%) #&gt; === 품종 처리 중: jersey === #&gt; smiss 데이터 앞부분: #&gt; # A tibble: 6 × 5 #&gt; FID IID MISSING_CT OBS_CT F_MISS #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 201 4273 56 47576 0.00118 #&gt; 2 202 4284 69 47576 0.00145 #&gt; 3 203 4289 54 47576 0.00114 #&gt; 4 204 4230 52 47576 0.00109 #&gt; 5 205 4292 27 47576 0.000568 #&gt; 6 206 4236 32 47576 0.000673 #&gt; vmiss 데이터 앞부분: #&gt; # A tibble: 6 × 5 #&gt; CHROM ID MISSING_CT OBS_CT F_MISS #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 Hapmap43437-BTA-101873 0 96 0 #&gt; 2 1 ARS-BFGL-NGS-16466 0 96 0 #&gt; 3 1 ARS-BFGL-NGS-105096 0 96 0 #&gt; 4 1 Hapmap34944-BES1_Contig627_1906 0 96 0 #&gt; 5 1 ARS-BFGL-NGS-98142 0 96 0 #&gt; 6 1 Hapmap53946-rs29015852 0 96 0 #&gt; hardy 데이터 앞부분: #&gt; # A tibble: 6 × 11 #&gt; CHROM ID A1 AX HOM_A1_CT HET_A1_CT TWO_AX_CT `O(HET_A1)` #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 Hapmap43437-BTA… G A 78 18 0 0.188 #&gt; 2 1 ARS-BFGL-NGS-16… G A 70 26 0 0.271 #&gt; 3 1 ARS-BFGL-NGS-10… G A 16 57 23 0.594 #&gt; 4 1 Hapmap34944-BES… C A 10 52 34 0.542 #&gt; 5 1 ARS-BFGL-NGS-98… G A 49 34 13 0.354 #&gt; 6 1 Hapmap53946-rs2… G A 46 45 5 0.469 #&gt; # ℹ 3 more variables: `E(HET_A1)` &lt;dbl&gt;, P &lt;dbl&gt;, minuslog10P &lt;dbl&gt; #&gt; afreq 데이터 앞부분: #&gt; # A tibble: 6 × 8 #&gt; CHROM ID REF ALT `PROVISIONAL_REF?` ALT_FREQS OBS_CT MAF_calc #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 Hapmap43437-… G A Y 0.0938 192 0.0938 #&gt; 2 1 ARS-BFGL-NGS… G A Y 0.135 192 0.135 #&gt; 3 1 ARS-BFGL-NGS… G A Y 0.536 192 0.464 #&gt; 4 1 Hapmap34944-… C A Y 0.625 192 0.375 #&gt; 5 1 ARS-BFGL-NGS… G A Y 0.312 192 0.312 #&gt; 6 1 Hapmap53946-… G A Y 0.286 192 0.286 #&gt; Warning: Removed 3 rows containing non-finite outside the scale range (`stat_bin()`). #&gt; Removed 3 rows containing non-finite outside the scale range (`stat_bin()`). #&gt; [jersey] 총 SNP 수: 47,576; 기준 실패 SNP 수: 12,501 (26.28%) 2.2.4 4) [RStudio Console] 품종별 QC 리포트 요약 결과 통합 summary_all &lt;- dplyr::bind_rows(summary_rows) readr::write_csv(summary_all, file.path(base_dir, &quot;qc_summary_by_breed.csv&quot;)) breed n_samples n_variants samples_over_mind snps_over_geno snps_fail_hwe snps_below_maf_threshold snps_fail_any_filter pct_fail_any holstein 200 47576 0 193 108 5751 5962 12.532 jersey 96 47576 0 154 48 12373 12501 26.276  최종출력물 품종별 (02_reports/&lt;breed&gt;/ 내부) 위치 파일 이름 형식 설명 02_reports/&lt;breed&gt;/figs/ smiss_hist.png, vmiss_hist.png, hardy_hist.png, maf_hist.png PNG 히스토그램 그림: 개체/변이 결측률, 하디–바인베르크(HWE, −log10P), MAF 02_reports/&lt;breed&gt;/ bad_samples_over_mind.&lt;breed&gt;.csv bad_snps_over_geno.&lt;breed&gt;.csv bad_snps_hwe.&lt;breed&gt;.csv bad_snps_low_maf.&lt;breed&gt;.csv CSV 지표별 이상치 목록 (개체 결측률, SNP 결측률, HWE, MAF) 02_reports/&lt;breed&gt;/ variant_qc_summary.&lt;breed&gt;.csv CSV 변이 단위 요약 (플래그 포함: fail_miss, fail_hwe, fail_maf, fail_any) 02_reports/&lt;breed&gt;/ qc_summary_counts.csv CSV 품종별 요약 (개체/변이 수 및 기준 실패 개수) 통합 (전체 품종)  전체 품종 요약: 02_reports/qc_summary_by_breed.csv (CSV) 2.2.5 5) QC 리포트 결과 다시보기  holstein 샘플 개수 200 변이 개수 47,576 실패 변이 5,962 (12.53%) miss 193 HWE 108 low MAF 5,751  jersey 샘플 개수 96 변이 개수 47,576 실패 변이 12,501 (26.28%) miss 154 HWE 48 low MAF 12,373 2.3 최종 PLINK1 Binary 세트 다시 만들기  최종 세트 재생성 요약 바뀐 QC 기준값(특히 per-population minor allele count (MAC) ≥ 10)을 적용하여 최종 PLINK1 binary 파일을 다시 생성한다.  Holstein 변경 mind 0.05 geno 0.05 hwe 1e-6 mac 10 (MAF 0.025)  Jersey 변경 mind 0.05 geno 0.05 hwe 1e-6 mac 10 (MAF 0.052)  Per-population MAC ≥ 10 해석: Holstein (n=200 → 400 chromosomes): MAC 10 ≈ MAF 10/400 = 0.025 Jersey (n=96 → 192 chromosomes): MAC 10 ≈ MAF 10/192 ≈ 0.052 즉, 표본 크기에 따라 실질 MAF 컷이 자동으로 맞춰진다.  7-1) Holstein (홀스타인) plink2 --pfile 04_split/NIAS_ibv3_296ea.holstein --mind 0.05 --geno 0.05 --mac 10 --hwe 1e-6 --make-bed --out 03_qc/NIAS_ibv3_296ea.holstein 생성되는 출력 파일: 03_qc/NIAS_ibv3_296ea.holstein.[bed|bim|fam]  PLINK2 run log (Holstein) —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --geno 0.05 --hwe 1e-6 --mac 10 --make-bed --mind 0.05 --out 03_qc/NIAS_ibv3_296ea.holstein --pfile 04_split/NIAS_ibv3_296ea.holstein Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Sun Aug 24 20:03:32 2025 Random number seed: 1756033412 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 200 samples (0 females, 0 males, 200 ambiguous; 200 founders) loaded from 04_split/NIAS_ibv3_296ea.holstein.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 04_split/NIAS_ibv3_296ea.holstein.pvar. Note: No phenotype data present. Calculating sample missingness rates... done. 0 samples removed due to missing genotype data (--mind). 200 samples (0 females, 0 males, 200 ambiguous; 200 founders) remaining after main filters. Calculating allele frequencies... done. --geno: 193 variants removed due to missing genotype data. --hwe: 37 variants removed due to Hardy-Weinberg exact test (founders only). 3660 variants removed due to allele frequency threshold(s) (--maf/--max-maf/--mac/--max-mac). 43686 variants remaining after main filters. Writing 03_qc/NIAS_ibv3_296ea.holstein.fam ... done. Writing 03_qc/NIAS_ibv3_296ea.holstein.bim ... done. Writing 03_qc/NIAS_ibv3_296ea.holstein.bed ... done. End time: Sun Aug 24 20:03:33 2025  7-2) Jersey (저지) plink2 --pfile 04_split/NIAS_ibv3_296ea.jersey --mind 0.05 --geno 0.05 --mac 10 --hwe 1e-6 --make-bed --out 03_qc/NIAS_ibv3_296ea.jersey 생성되는 출력 파일: 03_qc/NIAS_ibv3_296ea.jersey.[bed|bim|fam]  PLINK2 run log (Jersey) —  클릭하여 보기 PLINK v2.0.0-a.6.21 64-bit (6 Aug 2025) Options in effect: --geno 0.05 --hwe 1e-6 --mac 10 --make-bed --mind 0.05 --out 03_qc/NIAS_ibv3_296ea.jersey --pfile 04_split/NIAS_ibv3_296ea.jersey Hostname: haesu Working directory: G:\\Rhome\\NIAS_ibv3_296ea\\PLINK_120825_0322 Start time: Sun Aug 24 20:03:46 2025 Random number seed: 1756033426 65463 MiB RAM detected; reserving 32731 MiB for main workspace. Using up to 16 threads (change this with --threads). 96 samples (0 females, 0 males, 96 ambiguous; 96 founders) loaded from 04_split/NIAS_ibv3_296ea.jersey.psam. chrSet header line: 29 autosome pairs. 47576 variants loaded from 04_split/NIAS_ibv3_296ea.jersey.pvar. Note: No phenotype data present. Calculating sample missingness rates... done. 0 samples removed due to missing genotype data (--mind). 96 samples (0 females, 0 males, 96 ambiguous; 96 founders) remaining after main filters. Calculating allele frequencies... done. --geno: 154 variants removed due to missing genotype data. --hwe: 18 variants removed due to Hardy-Weinberg exact test (founders only). 12329 variants removed due to allele frequency threshold(s) (--maf/--max-maf/--mac/--max-mac). 35075 variants remaining after main filters. Writing 03_qc/NIAS_ibv3_296ea.jersey.fam ... done. Writing 03_qc/NIAS_ibv3_296ea.jersey.bim ... done. Writing 03_qc/NIAS_ibv3_296ea.jersey.bed ... done. End time: Sun Aug 24 20:03:46 2025  QC summary comparison: Holstein vs Jersey Metric  Holstein  Jersey Samples loaded 200 (200 founders) 96 (96 founders) Variants loaded 47,576 47,576 Removed by –mind 0.05 0 0 Removed by –geno 0.05 193 154 Removed by –hwe 1e-6 37 18 Removed by –mac 10 3,660 12,329 Final variants 43,686 35,075 2.4  QC 과정 완료 ✅ QC 절차를 끝까지 잘 마쳤다! 모든 단계(데이터 변환 → 오류 변이 제거 → 1차/2차 필터링 → 품종별 QC 리포트 리뷰 후 2차 필터링)를 거쳐 최종 PLINK1 binary 세트(.bed/.bim/.fam)를 만들었다.  이제 이 유전자형 데이터로 GWAS 분석을 시작할 수 있다.  2.5 스크립트 전체 보기  Plink Genotype QC cmd_plink_qc.bat 파일 —  클릭하여 보기 :: ============================================ :: Plink genotype data QC (run in RStudio Terminal on Windows CMD) :: ============================================ :: 0) 출력 폴더 생성 mkdir 00_import 01_autosomesX 02_reports 03_qc 04_split :: 1) PED/MAP → PGEN 변환 :: --cow : 소(cattle) 빌트/염색체 규칙 사용 :: --pedmap : 입력 prefix (NIAS_ibv3_296ea.ped/.map) :: --sort-vars : 변이를 유전체 좌표 순으로 정렬 :: --make-pgen : 출력 형식은 PLINK2(.pgen/.pvar/.psam) :: --out : 출력 접두어 plink2 --cow --pedmap NIAS_ibv3_296ea --sort-vars --make-pgen --out 00_import\\NIAS_ibv3_296ea :: 2) PVAR에서 REF/ALT가 둘 다 '.'인 문제 변이 목록 추출 및 제거 :: (이 상태는 \"Duplicate allele code\" 오류를 유발함) :: 2-1) REF(4열)과 ALT(5열)가 모두 '.'인 전체 행 저장(헤더 제외) awk -F '\\t' \"NR>1 && $4==\\\".\\\" && $5==\\\".\\\"\" 00_import\\NIAS_ibv3_296ea.pvar > bad_refalt_ids_both_strict.txt :: 2-2) 같은 조건의 변이 ID(3열)만 추출 awk -F '\\t' \"NR>1 && $4==\\\".\\\" && $5==\\\".\\\" {print $3}\" 00_import\\NIAS_ibv3_296ea.pvar > bad_refalt_ids.txt :: 2-3) 문제 변이 제외 후 깨끗한 pfile로 저장 plink2 --pfile 00_import/NIAS_ibv3_296ea --exclude bad_refalt_ids.txt --make-pgen --out 00_import/NIAS_ibv3_296ea.clean :: 3) 1차 필터(필수): 오토솜+X염색체, biallelic, 단일형 제거, 중복 ID 제거 → 이후 단계에서 사용하는 autosomesX 생성 :: --chr 1-29,X : 염색체 1–29 + X만 사용 :: --max-alleles 2 : 대립유전자 ≤ 2 (biallelic만 유지) :: --mac 1 : 최소 소수 대립유전자 수 ≥ 1 (단일형 변이 제거) :: --rm-dup force-first : 중복 변이 발견 시 첫 번째 것만 유지 (좌표/allele 기준) :: --sort-vars : 좌표 순으로 정렬 :: --make-pgen : pgen/pvar/psam 출력 :: --out : autosomesX 세트 출력 위치 plink2 --pfile 00_import/NIAS_ibv3_296ea.clean --chr 1-29,X --max-alleles 2 --mac 1 --rm-dup force-first --sort-vars --make-pgen --out 01_autosomesX/NIAS_ibv3_296ea.autosomesX :: 3-추가) 품종별 데이터셋 분리 준비: Holstein/Jersey IID 목록을 FID IID 두 열로 변환 :: (holstein.txt / jersey.txt에는 IID만 있다고 가정, .psam에서 FID를 매칭해온다) :: Holstein: 첫 번째 파일(holstein.txt)의 IID를 해시에 저장하고, .psam에서 일치하는 IID 행의 FID IID를 출력 awk \"NR==FNR {iid[$1]=1; next} FNR>1 && ($2 in iid) {print $1, $2}\" holstein.txt 01_autosomesX\\NIAS_ibv3_296ea.autosomesX.psam > holstein_ids.txt :: Jersey: 동일 처리 awk \"NR==FNR {iid[$1]=1; next} FNR>1 && ($2 in iid) {print $1, $2}\" jersey.txt 01_autosomesX\\NIAS_ibv3_296ea.autosomesX.psam > jersey_ids.txt :: 4) 품종별 서브셋 pfile 만들기 :: Holstein 서브셋 pfile 생성 (--keep: FID IID 목록의 샘플만 유지) plink2 --pfile 01_autosomesX/NIAS_ibv3_296ea.autosomesX --keep holstein_ids.txt --make-pgen --out 04_split/NIAS_ibv3_296ea.holstein :: Jersey 서브셋 pfile 생성 plink2 --pfile 01_autosomesX/NIAS_ibv3_296ea.autosomesX --keep jersey_ids.txt --make-pgen --out 04_split/NIAS_ibv3_296ea.jersey :: 5) 품종별 기본 QC 리포트 만들기 :: --missing : 샘플/변이 결측률(missing genotype rate) :: --hardy : HWE(하디–바인베르그) 검정 :: --freq : 대립유전자 빈도 :: 5-1) 품종별 QC 리포트 폴더 생성 mkdir 02_reports\\holstein 02_reports\\jersey :: Holstein QC 리포트 plink2 --pfile 04_split\\NIAS_ibv3_296ea.holstein --missing --hardy --freq --out 02_reports\\holstein\\NIAS_ibv3_296ea.holstein.autosomesX :: Jersey QC 리포트 plink2 --pfile 04_split\\NIAS_ibv3_296ea.jersey --missing --hardy --freq --out 02_reports\\jersey\\NIAS_ibv3_296ea.jersey.autosomesX :: 6) RStudio에서 품종별 QC 리포트 확인 및 2차 필터 값 결정 :: check_genotype_data.R script 실행 :: 7) 품종별 2차 필터 적용(값은 연구 목적/샘플 크기에 맞게 조정) :: --mind 0.05 : 개체 결측률 ≤ 5%만 유지(0.05 초과 개체 제외) :: --geno 0.05 : 변이 결측률 ≤ 5%만 유지(0.05 초과 변이 제외) :: --mac 10: MAF ≥ 0.025 (Holstein) 및 0.052(Jersey) 변이만 유지 :: --hwe 1e-6 : HWE p  Breed-wise QC Report Review check_genotype_data.R 파일 —  클릭하여 보기 # 품종별 기본 QC 보고서 # --------------------------------------------------- # ---- 필요한 패키지 설치 및 불러오기---- need % mutate( # 숫자형으로 변환 후 [0,1] 범위로 보정 ALT_FREQS = suppressWarnings(as.numeric(ALT_FREQS)), ALT_FREQS = pmin(pmax(ALT_FREQS, 0), 1), MAF_calc = pmin(ALT_FREQS, 1 - ALT_FREQS) ) } # ---- 기준값 (필요 시 조정) ---- mind_thr dplyr::rename(FID = `#FID`) # \"#FID\" -> FID vmiss dplyr::rename(CHROM = `#CHROM`) hardy dplyr::rename(CHROM = `#CHROM`) |> dplyr::mutate(minuslog10P = neglog10(P)) afreq dplyr::rename(CHROM = `#CHROM`) |> maf_from_afreq() message(\"smiss 데이터 앞부분:\"); print(utils::head(smiss)) message(\"vmiss 데이터 앞부분:\"); print(utils::head(vmiss)) message(\"hardy 데이터 앞부분:\"); print(utils::head(hardy)) message(\"afreq 데이터 앞부분:\"); print(utils::head(afreq)) # ---- 그래프 ---- qc_theme dplyr::filter(F_MISS > mind_thr) |> dplyr::select(FID, IID, F_MISS), envir = .GlobalEnv) assign(paste0(\"bad_snps_miss_\", breed), vmiss |> dplyr::filter(F_MISS > geno_thr) |> dplyr::select(CHROM, ID, F_MISS), envir = .GlobalEnv) assign(paste0(\"bad_snps_hwe_\", breed), hardy |> dplyr::filter(P dplyr::select(CHROM, ID, P), envir = .GlobalEnv) assign(paste0(\"bad_snps_maf_\", breed), afreq |> dplyr::filter(MAF_calc dplyr::select(CHROM, ID, MAF_calc), envir = .GlobalEnv) readr::write_csv(get(paste0(\"bad_samples_\", breed)), file.path(out_dir, paste0(\"bad_samples_over_mind.\", breed, \".csv\"))) readr::write_csv(get(paste0(\"bad_snps_miss_\", breed)), file.path(out_dir, paste0(\"bad_snps_over_geno.\", breed, \".csv\"))) readr::write_csv(get(paste0(\"bad_snps_hwe_\", breed)), file.path(out_dir, paste0(\"bad_snps_hwe.\", breed, \".csv\"))) readr::write_csv(get(paste0(\"bad_snps_maf_\", breed)), file.path(out_dir, paste0(\"bad_snps_low_maf.\", breed, \".csv\"))) # ---- 품종별 변이 QC 요약 ---- vmiss dplyr::mutate(CHROM = as.character(CHROM)) hardy dplyr::mutate(CHROM = as.character(CHROM)) afreq dplyr::mutate(CHROM = as.character(CHROM)) variant_qc dplyr::select(CHROM, ID, F_MISS) |> dplyr::left_join(dplyr::select(hardy, CHROM, ID, P), by = c(\"CHROM\",\"ID\")) |> dplyr::left_join(dplyr::select(afreq, CHROM, ID, MAF_calc), by = c(\"CHROM\",\"ID\")) |> dplyr::mutate( fail_miss = F_MISS > geno_thr, fail_hwe = P mind_thr, na.rm = TRUE) snps_over_geno geno_thr, na.rm = TRUE) snps_fail_hwe "],["gwas-절차.html", "3 GWAS 절차 3.1 패키지 설치 &amp; 로딩 3.2 경로/입력 정의 3.3 PLINK binary 데이터 불러오기 3.4 표현형 데이터 로딩 &amp; 정렬 3.5 GRM(유전체 관계 행렬) 계산 &amp; 간단 시각화 3.6 GWAS 분석용 데이터 객체 만들기 3.7 GWAS 귀무모형 적합 및 유전력(SNP heritability) 계산 3.8 GWAS 최종 null 모형 적합 및 GWAS 3.9 GWAS 결과 시각화 3.10  R로 GWAS 과정 완료 3.11 스크립트 전체 보기", " 3 GWAS 절차 개요  단계별 튜토리얼: R에서 GWAS 수행 필요 패키지 설치/로딩 PLINK 유전자형 데이터 &amp; 표현형 데이터 로딩 및 정리 GRM 계산 및 시각화 lme4breeding + GWASTools + GENESIS 기반 GWAS 귀무모형(Null model) 적합 단일 마커 연관성 검정, P 값 보정, 결과 시각화 3.1 패키지 설치 &amp; 로딩 # ---- 설치어시스턴트 ------------------------------------------------------- cran_pkgs &lt;- c(&quot;genio&quot;, &quot;qqman&quot;, &quot;sommer&quot;, &quot;lme4breeding&quot;, &quot;dplyr&quot;, &quot;CMplot&quot;, &quot;stringr&quot;, &quot;ggplot2&quot;, &quot;tibble&quot;, &quot;readr&quot;) bioc_pkgs &lt;- c(&quot;GENESIS&quot;,&quot;GWASTools&quot;,&quot;BiocParallel&quot;) if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) install_if_missing &lt;- function(pkgs, installer) { need &lt;- pkgs[!vapply(pkgs, requireNamespace, logical(1), quietly = TRUE)] if (length(need)) installer(need, ask = FALSE) } install_if_missing(cran_pkgs, install.packages) install_if_missing(bioc_pkgs, BiocManager::install) # ---- 라이브러리 로드 ------------------------------------------------------ library(genio) library(GENESIS) library(GWASTools) library(qqman) library(CMplot) library(lme4breeding) library(sommer) library(dplyr) library(stringr) library(ggplot2) library(tibble) 3.2 경로/입력 정의 breed &lt;- &quot;holstein&quot; plink_prefix &lt;- &quot;03_qc/NIAS_ibv3_296ea.holstein&quot; pheno_file &lt;- &quot;NIAS_ibv3_296ea_pheno.csv&quot; report_dir &lt;- file.path(&quot;05_gwas&quot;, breed) figs_dir &lt;- file.path(report_dir, &quot;figs&quot;) gwas_dir &lt;- file.path(report_dir, &quot;gwas&quot;) tables_dir &lt;- file.path(report_dir, &quot;tables&quot;) for (d in c(report_dir, figs_dir, gwas_dir, tables_dir)) dir.create(d, recursive = TRUE, showWarnings = FALSE) 3.3 PLINK binary 데이터 불러오기 # read_plink()는 SNP x Sample 행렬(X), bim(마커정보), fam(개체정보)을 불러온다. plink &lt;- read_plink(plink_prefix) X &lt;- plink$X # 행: SNP, 열: 샘플, 값: 0/1/2 bim &lt;- plink$bim # chr, id, pos, alt, ref 등 fam &lt;- plink$fam # family/sample id 등 # 미리보기 X[1:5, 1:5] #&gt; 3530 3528 3527 3195 3994 #&gt; Hapmap43437-BTA-101873 1 1 1 1 0 #&gt; ARS-BFGL-NGS-16466 0 0 0 0 0 #&gt; ARS-BFGL-NGS-105096 1 0 1 0 0 #&gt; Hapmap34944-BES1_Contig627_1906 0 0 1 0 0 #&gt; ARS-BFGL-NGS-98142 1 0 2 0 0 head(bim) #&gt; # A tibble: 6 × 6 #&gt; chr id posg pos alt ref #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 1 Hapmap43437-BTA-101873 0 135098 A G #&gt; 2 1 ARS-BFGL-NGS-16466 0 267940 A G #&gt; 3 1 ARS-BFGL-NGS-105096 0 353745 A G #&gt; 4 1 Hapmap34944-BES1_Contig627_1906 0 393248 A C #&gt; 5 1 ARS-BFGL-NGS-98142 0 471078 A G #&gt; 6 1 Hapmap53946-rs29015852 0 516404 A G head(fam) #&gt; # A tibble: 6 × 6 #&gt; fam id pat mat sex pheno #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 1 3530 0 0 0 -9 #&gt; 2 2 3528 0 0 0 -9 #&gt; 3 3 3527 0 0 0 -9 #&gt; 4 4 3195 0 0 0 -9 #&gt; 5 5 3994 0 0 0 -9 #&gt; 6 6 3786 0 0 0 -9 3.4 표현형 데이터 로딩 &amp; 정렬 pheno &lt;- readr::read_csv(pheno_file, show_col_types = FALSE) sample_id_chr &lt;- colnames(X) # PLINK 열이 샘플 ID scanID &lt;- seq_along(sample_id_chr) pheno_ord &lt;- pheno[match(sample_id_chr, pheno$individual_id), , drop = FALSE] stopifnot(!any(is.na(pheno_ord$individual_id))) pheno_ord$sample_id &lt;- sample_id_chr pheno_ord$scanID &lt;- scanID stopifnot(identical(as.character(pheno_ord$individual_id), pheno_ord$sample_id)) # 미리보기 str(pheno_ord) #&gt; tibble [200 × 15] (S3: tbl_df/tbl/data.frame) #&gt; $ individual_id : num [1:200] 3530 3528 3527 3195 3994 ... #&gt; $ breed : chr [1:200] &quot;holstein&quot; &quot;holstein&quot; &quot;holstein&quot; &quot;holstein&quot; ... #&gt; $ sire_id : num [1:200] 3074 2930 3048 3056 3050 ... #&gt; $ dam_id : num [1:200] 3210 3343 3281 3016 3799 ... #&gt; $ birth_date : Date[1:200], format: &quot;2009-03-02&quot; &quot;2009-01-17&quot; ... #&gt; $ HYS : num [1:200] 1.16e+10 1.18e+10 1.18e+10 1.18e+10 1.16e+10 ... #&gt; $ farm_id : num [1:200] 116482 117952 117952 117952 116482 ... #&gt; $ parity : num [1:200] 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ days_in_milk : num [1:200] 482 531 382 556 264 447 425 400 345 385 ... #&gt; $ milk_yield_305.days : num [1:200] 7965 9717 12554 9951 7982 ... #&gt; $ milk_fat_yield_305.days : num [1:200] 281 314 468 445 271 297 305 347 359 355 ... #&gt; $ milk_protein_yield_305.days: num [1:200] 260 302 384 334 260 240 230 327 293 309 ... #&gt; $ somatic_cell_count : num [1:200] 1.39 1.89 2.14 4.31 3.9 ... #&gt; $ sample_id : chr [1:200] &quot;3530&quot; &quot;3528&quot; &quot;3527&quot; &quot;3195&quot; ... #&gt; $ scanID : int [1:200] 1 2 3 4 5 6 7 8 9 10 ... # 표현형 분포 확인 # --- 분석할 형질을 이 변수에 지정 --- single_trait &lt;- &quot;days_in_milk&quot; p=ggplot(pheno_ord, aes(x = .data[[single_trait]])) + geom_histogram(aes(y = after_stat(density)), bins = 30, fill = &quot;grey70&quot;, color = &quot;white&quot;) + geom_density(linewidth = 1) + labs( title = paste(&quot;Distribution of&quot;, single_trait), x = single_trait, y = &quot;Density&quot; ) + theme_minimal() # 변수에 저장된 플롯 확인 print(p) # ggsave() 함수를 사용하여 플롯을 png 파일로 저장 ggsave( filename = file.path(figs_dir, paste0(&quot;pheno_distribution_&quot;, single_trait, &quot;.png&quot;)), plot = p, width = 6, height = 4, dpi = 300 ) 3.5 GRM(유전체 관계 행렬) 계산 &amp; 간단 시각화 # A.mat은 -1/0/1 코딩된 genotype matrix 이용 G_mat &lt;- t(X) # 샘플 x SNP colnames(G_mat) &lt;- rownames(X) rownames(G_mat) &lt;- sample_id_chr G_code &lt;- G_mat - 1 # 0/1/2 -&gt; -1/0/1 KI &lt;- sommer::A.mat(G_code) #&gt; Imputing markers with mean value # 수치안정성(아주 작은 ridge) diag(KI) &lt;- diag(KI) + 1e-4 # scanID 기준의 dimnames 지정 rownames(KI) &lt;- as.character(scanID) colnames(KI) &lt;- as.character(scanID) stopifnot( identical(rownames(KI), as.character(scanID)), identical(colnames(KI), as.character(scanID)) ) # 상위 5x5 확인 KI[1:5, 1:5] #&gt; 1 2 3 4 5 #&gt; 1 1.01954033 -0.026190312 -0.01241066 0.090020422 -0.04370613 #&gt; 2 -0.02619031 0.974199397 0.07949861 -0.009271238 0.03287250 #&gt; 3 -0.01241066 0.079498610 0.93486718 -0.051821286 0.01365447 #&gt; 4 0.09002042 -0.009271238 -0.05182129 0.997304816 0.04189677 #&gt; 5 -0.04370613 0.032872500 0.01365447 0.041896774 1.09127396 # 히트맵 colfunc &lt;- grDevices::colorRampPalette(c(&quot;steelblue4&quot;,&quot;springgreen&quot;,&quot;yellow&quot;)) png(file.path(report_dir, &quot;A_matrix_heatmap.png&quot;), width=2000, height=1400, res=200) stats::heatmap(KI, col = colfunc(100), Colv = &quot;Rowv&quot;, symmetric = TRUE) dev.off() #&gt; png #&gt; 2 GRM 히트맵 3.6 GWAS 분석용 데이터 객체 만들기 bim &lt;- cbind(index = seq_len(nrow(bim)), bim) stopifnot(all.equal(rownames(X), bim$id)) stopifnot(all.equal(colnames(X), pheno_ord$sample_id)) rownames(X) &lt;- bim$index colnames(X) &lt;- scanID # GENESIS 패키지에서 요구하는 데이터 객체 만들기 mg &lt;- GWASTools::MatrixGenotypeReader( genotype = X, snpID = bim$index, chromosome = as.integer(bim$chr), position = as.integer(bim$pos), scanID = scanID, autosomeCode = 1L:29L, XchromCode = 30L, YchromCode = 31L, XYchromCode = 32L, MchromCode = 33L ) # 유전자형 데이터 객체 생성 genoData &lt;- GWASTools::GenotypeData(mg) # 표현형 데이터 객체 생성 scanAnno &lt;- GWASTools::ScanAnnotationDataFrame(pheno_ord) # 객체 구조 확인 str(genoData) #&gt; Formal class &#39;GenotypeData&#39; [package &quot;GWASTools&quot;] with 3 slots #&gt; ..@ data :Formal class &#39;MatrixGenotypeReader&#39; [package &quot;GWASTools&quot;] with 10 slots #&gt; .. .. ..@ snpID : int [1:43686] 1 2 3 4 5 6 7 8 9 10 ... #&gt; .. .. ..@ chromosome : int [1:43686] 1 1 1 1 1 1 1 1 1 1 ... #&gt; .. .. ..@ position : int [1:43686] 135098 267940 353745 393248 471078 516404 845494 883895 929617 950841 ... #&gt; .. .. ..@ scanID : int [1:200] 1 2 3 4 5 6 7 8 9 10 ... #&gt; .. .. ..@ genotype : int [1:43686, 1:200] 1 0 1 0 1 1 0 0 0 0 ... #&gt; .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 #&gt; .. .. .. .. ..$ : chr [1:43686] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... #&gt; .. .. .. .. ..$ : chr [1:200] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... #&gt; .. .. ..@ autosomeCode: int [1:29] 1 2 3 4 5 6 7 8 9 10 ... #&gt; .. .. ..@ XchromCode : int 30 #&gt; .. .. ..@ YchromCode : int 31 #&gt; .. .. ..@ XYchromCode : int 32 #&gt; .. .. ..@ MchromCode : int 33 #&gt; ..@ snpAnnot : NULL #&gt; ..@ scanAnnot: NULL str(scanAnno@data) #&gt; tibble [200 × 15] (S3: tbl_df/tbl/data.frame) #&gt; $ individual_id : num [1:200] 3530 3528 3527 3195 3994 ... #&gt; $ breed : chr [1:200] &quot;holstein&quot; &quot;holstein&quot; &quot;holstein&quot; &quot;holstein&quot; ... #&gt; $ sire_id : num [1:200] 3074 2930 3048 3056 3050 ... #&gt; $ dam_id : num [1:200] 3210 3343 3281 3016 3799 ... #&gt; $ birth_date : Date[1:200], format: &quot;2009-03-02&quot; &quot;2009-01-17&quot; ... #&gt; $ HYS : num [1:200] 1.16e+10 1.18e+10 1.18e+10 1.18e+10 1.16e+10 ... #&gt; $ farm_id : num [1:200] 116482 117952 117952 117952 116482 ... #&gt; $ parity : num [1:200] 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ days_in_milk : num [1:200] 482 531 382 556 264 447 425 400 345 385 ... #&gt; $ milk_yield_305.days : num [1:200] 7965 9717 12554 9951 7982 ... #&gt; $ milk_fat_yield_305.days : num [1:200] 281 314 468 445 271 297 305 347 359 355 ... #&gt; $ milk_protein_yield_305.days: num [1:200] 260 302 384 334 260 240 230 327 293 309 ... #&gt; $ somatic_cell_count : num [1:200] 1.39 1.89 2.14 4.31 3.9 ... #&gt; $ sample_id : chr [1:200] &quot;3530&quot; &quot;3528&quot; &quot;3527&quot; &quot;3195&quot; ... #&gt; $ scanID : int [1:200] 1 2 3 4 5 6 7 8 9 10 ... 3.7 GWAS 귀무모형 적합 및 유전력(SNP heritability) 계산 # --- 분석할 형질을 이 변수에 지정 --- single_trait &lt;- &quot;days_in_milk&quot; # 분석할 형질이 데이터에 존재하는지 확인. 없으면 에러를 발생시키고 중단 stopifnot(single_trait %in% colnames(scanAnno@data)) # --- 데이터 전처리 --- # 1. 모델에서 효과를 분석할 변수들을 factor(범주형 변수)로 변환 pheno_ord$farm_id &lt;- as.factor(pheno_ord$farm_id) pheno_ord$scanID &lt;- as.factor(pheno_ord$scanID) # 2. 분석할 형질(days_in_milk)에 결측치(NA)가 있는 샘플을 제거하여 # 최종 분석 데이터셋 &#39;PH&#39;를 생성 # droplevels() 함수는 PH 데이터셋에 더 이상 존재하지 않는 샘플이나 농장의 레벨 정보를 제거 PH &lt;- droplevels(subset(pheno_ord, !is.na(days_in_milk))) # 3. Kinship 행렬(KI)을 최종 분석 데이터셋 &#39;PH&#39;에 맞춰 자른다. # 반드시 &#39;PH&#39;의 샘플 목록과 순서를 기준으로 잘라야, # 표현형 데이터와 Kinship 데이터의 샘플이 1:1로 정확하게 일치한다. K_scan &lt;- KI[levels(PH$scanID), levels(PH$scanID)] # 농장 효과와 개체별 유전 효과를 임의 효과(random effect)로 설정하여 모델을 만든다. # lmebreed 함수는 혈연관계(kinship)를 고려한 혼합 모델을 적합해준다. mix &lt;- lme4breeding::lmebreed( # 모델 공식: days_in_milk를 개체 효과(scanID)와 농장 효과(farm_id)로 설명 days_in_milk ~ (1|scanID) + (1|farm_id), # relmat 인자: scanID의 임의 효과는 K_scan 행렬에 정의된 유전적 관계를 따르도록 지정한다. relmat = list(scanID = K_scan), # verbose=TRUE: 모델 계산 과정을 화면에 출력 verbose = TRUE, # data 인자: 모델에 사용할 데이터셋으로 PH를 지정 data = PH ) # 모델 분석 결과 요약본 출력 summary(mix) #&gt; Linear mixed model fit by REML [&#39;lmerlmebreed&#39;] #&gt; Formula: days_in_milk ~ (1 | scanID) + (1 | farm_id) #&gt; Data: PH #&gt; #&gt; REML criterion at convergence: 2551.3 #&gt; #&gt; Scaled residuals: #&gt; Min 1Q Median 3Q Max #&gt; -1.7342 -0.4654 -0.2040 0.3307 7.6392 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; scanID (Intercept) 3794.3 61.60 #&gt; farm_id (Intercept) 289.4 17.01 #&gt; Residual 17284.7 131.47 #&gt; Number of obs: 200, groups: scanID, 200; farm_id, 20 #&gt; #&gt; Fixed effects: #&gt; Estimate Std. Error t value #&gt; (Intercept) 360.25 10.71 33.65 .gwas-card{ border:1px solid #e5e7eb; border-radius:12px; overflow:hidden; margin:18px 0; background:#fcfcff; box-shadow:0 1px 0 rgba(17,24,39,.04); } .gwas-header{ padding:10px 16px; background:#e0e7ff; border-bottom:1px solid #c7d2fe; display:flex; align-items:center; gap:.6rem; } .gwas-header .title{ font-weight:700; } .gwas-body{ padding:16px 18px; } /* 나머지 스타일은 위와 동일 */ .gwas-sub{ color:#4b5563; margin:0 0 .8rem; font-size:.95rem; } .gwas-dl{ margin:0; } .gwas-dl dt{ font-weight:700; margin-top:.6rem; } .gwas-dl dd{ margin:.15rem 0 .5rem 0; color:#374151; } .gwas-kpis{ display:flex; flex-wrap:wrap; gap:.5rem; margin:.6rem 0 .2rem; } .kpi{ display:inline-flex; align-items:center; gap:.35rem; padding:.3rem .55rem; border-radius:999px; background:#c7d2fe; font-weight:600; border:1px solid #818cf8; color:#1f2937; } .badge{ font-size:.8rem; padding:.05rem .35rem; border-radius:6px; background:#9ca3af; color:#fff; } .gwas-grid{ display:grid; grid-template-columns: 1fr; gap:.6rem; } @media(min-width:700px){ .gwas-grid{ grid-template-columns:1fr 1fr; } } .gwas-table{ width:100%; border-collapse:collapse; font-size:.95rem; } .gwas-table th, .gwas-table td{ padding:.4rem .55rem; border-bottom:1px solid #e5e7eb; text-align:left; } .gwas-note{ margin-top:.6rem; color:#374151; } .hr-soft{ border:0; border-top:1px dashed #e5e7eb; margin:1rem 0; } ❓Null model 요약 — days_in_milk Vg/Vc/Ve & h² 1. 임의 효과 (Random effects) 분석 이 부분이 결과 해석의 핵심이다. days_in_milk 형질의 전체 변이가 어떤 요인들로 구성되어 있는지 보여준다. scanID Variance: 3794.3 Vg farm_id Variance: 289.4 Vc Residual Variance: 17284.7 Ve scanID (유전 효과) 개체 간 유전적 차이(혈연관계 고려)로 인한 분산 → 유전 분산(Vg). farm_id (농장 효과) 농장 간 환경 차이로 인한 분산 → 공통 환경 분산(Vc). Residual (잔차) 유전 및 농장 효과로 설명되지 않는 나머지 오차 → 환경 분산(Ve).  2. 유전력 (Heritability) 계산 성분값설명 Vg3794.3유전 분산 Vc289.4농장(공통 환경) 분산 Ve17284.7잔차(환경) 분산 Vp = Vg + Vc + Ve21368.4전체 표현형 분산 h² = Vg / Vp0.178유전력 결론: days_in_milk의 SNP 유전력은 약 17.8%로 추정된다. 이는 이 형질의 전체 변이 중 약 17.8%가 우리가 측정한 SNP 마커로 설명되는 유전적 요인에 의해 결정된다는 의미이다. 추가로, 농장 환경이 설명하는 변이의 비율은 289.4 / 21368.4 ≈ 1.4%로 상대적으로 작다는 것을 알 수 있다. 3.7.1 함수를 이용한 유전력 계산 # VarCorr() 함수로 모델(&#39;mix&#39;)에서 분산 성분(Variance Components)을 추출 vc &lt;- VarCorr(mix) print(vc, comp = c(&quot;Variance&quot;)) #&gt; Groups Name Variance #&gt; scanID (Intercept) 3794.3 #&gt; farm_id (Intercept) 289.4 #&gt; Residual 17284.7 # 잔차 분산(Residual variance)을 추출 # VarCorr 결과의 속성(attribute) &quot;sc&quot;는 잔차의 표준편차이므로 제곱하여 분산을 구한다. ve &lt;- attr(VarCorr(mix), &quot;sc&quot;)^2 # SNP 유전력(h2) 계산 # h2 = 유전분산 / (유전분산 + 농장분산 + 잔차분산) h2 &lt;- vc$scanID / (vc$scanID + vc$farm_id + ve) print(paste(&quot;SNP Heritability (h2):&quot;, base::as.numeric(h2))) #&gt; [1] &quot;SNP Heritability (h2): 0.177565708276822&quot; # 전체 표현형 분산 중 농장 효과(farm ID)가 차지하는 분산 비율 계산 farm_var &lt;- vc$farm_id / (vc$scanID + vc$farm_id + ve) print(paste(&quot;Farm Variance ratio:&quot;, base::as.numeric(farm_var))) #&gt; [1] &quot;Farm Variance ratio: 0.0135431802521894&quot; 3.8 GWAS 최종 null 모형 적합 및 GWAS # --- 분석할 형질을 이 변수에 지정 --- single_trait &lt;- &quot;days_in_milk&quot; # 분석할 형질이 데이터에 존재하는지 확인. 없으면 에러를 발생시키고 중단 stopifnot(single_trait %in% colnames(scanAnno@data)) # 귀무모형 null_single &lt;- GENESIS::fitNullModel( x = scanAnno, outcome = single_trait, cov.mat = list(gen = KI), family = &quot;gaussian&quot; ) #&gt; [1] 10779.434372 10779.434372 -1278.687547 1.071434 #&gt; [1] 1144.527824 18338.039393 -1276.652397 1.094402 #&gt; [1] 3645.393100 17248.267336 -1275.789581 1.019586 #&gt; [1] 4223.460337 17110.722529 -1275.775915 1.000707 #&gt; [1] 4101.06852 17235.09102 -1275.77526 1.00002 #&gt; [1] 4140.354608 17200.070348 -1275.775190 1.000002 #&gt; [1] 4128.278 17210.979 -1275.775 1.000 #&gt; [1] 4132.027 17207.607 -1275.775 1.000 # 모형에서 추정된 분산 성분(유전분산, 잔차분산)을 확인 null_single$varComp #&gt; V_gen V_resid.var #&gt; 4132.027 17207.607 # SNP heritability 계산 (h2, CI value) GENESIS::varCompCI(null_single, prop = TRUE) #&gt; Proportion Lower 95 Upper 95 #&gt; V_gen 0.1936316 -0.06226513 0.4495283 #&gt; V_resid.var 0.8063684 0.55047174 1.0622651 # GWAS 실행 # 유전체 데이터를 **블록 단위(여기서는 10,000 SNP씩)**로 순차 처리하기 위한 이터레이터 생성: 메모리 사용을 줄이기 위함 genoIt &lt;- GWASTools::GenotypeBlockIterator(genoData, snpBlock = 10000) # 위에서 적합한 귀무모형을 고정한 상태에서, 각 SNP에 대해 단일변량 Score test로 연관성을 계산 assoc_single &lt;- GENESIS::assocTestSingle( genoIt, null.model = null_single, BPPARAM = BiocParallel::SerialParam() ) # ---- P-값 보정 &amp; 유의 SNP 선별 --------------------------------- assoc_single$p_adj_BH=p.adjust(assoc_single$Score.pval, method=&quot;BH&quot;) assoc_single$p_adj_bonferroni=p.adjust(assoc_single$Score.pval, method=&quot;bonferroni&quot;) # 저장 saveRDS(assoc_single, file = file.path(gwas_dir, paste0(&quot;assoc_&quot;, single_trait, &quot;.rds&quot;))) readr::write_csv(assoc_single, file.path(tables_dir, paste0(&quot;assoc_&quot;, single_trait, &quot;.csv&quot;))) head(assoc_single, 5) Table 3.1: Table 3.2: GWAS 연관 분석 결과 (5개 SNP 예시) variant.id a chr b pos c n.obs d freq e MAC f Score g Score.SE h Score.Stat i Score.pval j Est k Est.SE l PVE m p_adj_BH n p_adj_bonferroni o 1 1 135098 200 0.615 154 -0.124 0.067 -1.858 0.063 -27.866 15.002 0.017 0.991 1 2 1 267940 200 0.065 26 -0.009 0.032 -0.293 0.770 -9.212 31.457 0.000 1.000 1 3 1 353745 200 0.072 29 -0.035 0.035 -1.017 0.309 -29.238 28.762 0.005 1.000 1 4 1 393248 200 0.215 86 -0.107 0.054 -1.984 0.047 -36.830 18.561 0.020 0.991 1 5 1 471078 200 0.292 117 -0.145 0.061 -2.396 0.017 -39.544 16.506 0.029 0.991 1 a SNP 고유 ID (인덱스) b 염색체 번호 c 염색체 내 위치 (base pair) d 해당 SNP 분석에 사용된 개체 수 e 대립유전자 빈도 (Allele Frequency) f 부대립유전자 개수 (Minor Allele Count) g 연관성 검정의 Score 통계량 h Score 통계량의 표준 오차 i 표준화된 Score 통계량 (Z-값) j 연관성 검정의 P-값 k 대립유전자의 효과 추정치 (Effect Size) l 효과 추정치의 표준 오차 m 해당 SNP이 설명하는 표현형 분산의 비율 (PVE) n BH 방법으로 보정된 P-값 (FDR) o Bonferroni 방법으로 보정된 P-값 3.8.1 Null model이란? 왜 먼저 적합하는가? 3.8.2  모형식 전체(혼합) 모형 \\[ y = X\\beta + Zu + G\\gamma + \\varepsilon \\] Null 모형(검정할 SNP 제거) \\[ y = X\\beta + Zu + \\varepsilon \\] 모형항 풀이 \\(y\\) : 관측한 형질 값(예: days_in_milk). \\(X\\) : 고정효과 설계행렬(입력 행렬) — 절편(1), 성별/연령, 주성분(PC) 등의 공변량 열로 구성. \\(\\beta\\) : 고정효과 계수(공변량의 평균적인 영향 크기). \\(Z\\) : 임의효과 인시던스 행렬 — 개체가 어떤 레벨(개체 자신/농장 등)에 속하는지 0/1로 표시. \\(u\\) : 임의효과 벡터. 개체 유전효과는 GRM \\(K\\)(친족도 행렬)로 상관구조를 반영해 모델링. 농장 효과처럼 서로 독립·분산 동일로 보는 효과는 항등행렬 \\(I\\)(상관 0, 분산 동일)로 둠. \\(G\\) : 검정 중인 단일 SNP의 유전자형(0/1/2 또는 통계적으로 추정된 유전자량, dosage). assocTestSingle()가 SNP마다 이 \\(G\\)를 바꿔가며 사용. \\(\\gamma\\) : 해당 SNP의 효과 크기(귀무가설 \\(H_0:\\gamma=0\\)). \\(\\varepsilon\\) : 잔차(아직 설명되지 않은 변동). 3.8.3  한눈에 보기 Null model: SNP 효과 없이 공변량/친족구조만으로 오차구조·분산성분을 먼저 추정 GWAS per-SNP: 위 Null을 고정하고 각 SNP를 Score 계열 검정(Score, Score.SPA 등)으로 빠르게 평가 GWAS에서 Null model(귀무모형)을 먼저 적합하는 것은 정확하고 효율적인 분석을 위한 핵심 전략이다. 통계적 타당성(제1종 오류 통제) 집단 구조((population stratification)나 친족 관계(cryptic relatedness)가 있으면, 이를 보정하지 않을 때 genomic inflation(λ)이 커지고 거짓양성(제1종 오류)이 늘어난다. Null model은 GRM, \\(K\\) 등으로 오차 구조와 분산성분을 먼저 추정해 이 교란을 제거/완화한다. 그 결과, 이후 SNP 검정에서 λ가 안정되고 거짓양성이 억제된다. 계산 효율성(속도) 혼합모형의 분산성분 추정은 고비용 작업(큰 GRM 역행렬 계산 등)이다. Null에서 한 번만 분산성분을 추정·고정해 두고, 이후 각 SNP는 Score 계열 검정으로 처리하면 수십만~수백만 SNP도 빠르게 평가할 수 있다(매 SNP마다 혼합모형을 재적합할 필요 없음). 가정(Infinitesimal 가정) 이 방법은 “개별 SNP 하나가 전체 유전분산 \\(\\sigma_g^2\\)에 미치는 영향은 매우 작다”는 가정에 기반한다. 드물게 특정 SNP 효과가 매우 크면(예: 유전력의 큰 비율) 약간의 정확도 손실이 있을 수 있으나, 일반적으로 Null→Score 절차가 가장 합리적이다. 3.8.3.1  Genomic Inflation, \\(\\lambda\\) 정의: GWAS에서 관측된 검정 통계량(또는 P-값)들이 귀무가설 하의 기대치보다 전반적으로 더 유의하게 나오는 현상. 이는 모델이 데이터 속 집단 계층화, 잠재적 친족 관계 등을 충분히 통제하지 못했을 때 나타나는 체계적 편향(systematic bias)의 신호이다. 결론: Null model을 먼저 적합하면 genomic inflation을 방지하고 제1종 오류를 통제하면서, 대규모 SNP를 고속으로 분석할 수 있다. # 결과 요약 # genomic inflation 구하기 chisq &lt;- qchisq(1 - assoc_single$Score.pval, df = 1) lambda &lt;- median(chisq, na.rm = TRUE)/stats::qchisq(0.5, 1) # 요약 표로 정리하기 summary_single &lt;- tibble::tibble( trait = single_trait, n_snps = sum(!is.na(assoc_single$Score.pval)), lambda = lambda, n_sig_BH = sum(assoc_single$p_adj_BH &lt; 0.05, na.rm = TRUE), n_sig_bonf = sum(assoc_single$p_adj_bonferroni &lt; 0.05, na.rm = TRUE), min_p = min(assoc_single$Score.pval, na.rm = TRUE), min_p_SNP = assoc_single$variant.id[which.min(assoc_single$Score.pval)], min_BH = min(assoc_single$p_adj_BH, na.rm = TRUE) ) readr::write_csv(summary_single, file.path(tables_dir, paste0(&quot;gwas_summary_&quot;, single_trait, &quot;.csv&quot;)))  GWAS 요약 결과 trait a n_snps b lambda c n_sig_BH d n_sig_bonf e min_p f min_p_SNP g min_BH h days_in_milk 43686 0.986 0 0 0 37174 0.443 a 분석 대상 형질 이름 b 분석에 사용된 총 SNP 개수 c Genomic Inflation Factor (λ): 집단 구조화가 잘 보정되었는지 확인하는 지표. 1에 가까울수록 좋음. d BH 보정 기준(FDR &lt; 0.05)을 만족하는 유의 SNP 개수 e Bonferroni 보정 기준을 만족하는 유의 SNP 개수 f 가장 낮은 P-값 (min P-value) g 가장 낮은 P-값을 보이는 SNP의 index ID h 가장 낮은 BH 보정 P-값 (min FDR) /* R 코드 청크(echo=TRUE)의 스타일을 지정합니다 */ pre.sourceCode { background-color: #e7f3ff !important; /* 연한 하늘색 배경 */ border: 1px solid #cce0ff !important; /* 배경색과 어울리는 연한 파란색 테두리 */ border-radius: 5px; /* 모서리를 살짝 둥글게 (선택 사항) */ } /* 테이블 헤더(th)의 텍스트가 줄바꿈되지 않도록 설정 */ .table th { white-space: nowrap; } 3.9 GWAS 결과 시각화 # PVE 분포 확인 p = ggplot(assoc_single, aes(x = PVE*100)) + # PVE를 퍼센트로 변환 geom_histogram(aes(y = after_stat(density)), bins = 30, fill = &quot;grey70&quot;, color = &quot;white&quot;) + geom_density(linewidth = 1) + labs(title = &quot;Distribution of Variance Explained (PVE) by Single Variants&quot;, x = &quot;PVE (%)&quot;, y = &quot;Density&quot;) + theme_minimal() print(p) # 플롯 저장 ggsave(file.path(figs_dir, paste0(&quot;pve_hist_&quot;, single_trait, &quot;.png&quot;)), p, dpi=300, width=6, height=4) # ---- QQ 플롯 &amp; 맨해튼 플롯 ------------------------------- manplot &lt;- assoc_single |&gt; dplyr::select(SNP = variant.id, Chromosome = chr, Position = pos, P = Score.pval) # 염색체 분류 확인 dplyr::distinct(manplot, Chromosome) #&gt; Chromosome #&gt; 1 1 #&gt; 2 2 #&gt; 3 3 #&gt; 4 4 #&gt; 5 5 #&gt; 6 6 #&gt; 7 7 #&gt; 8 8 #&gt; 9 9 #&gt; 10 10 #&gt; 11 11 #&gt; 12 12 #&gt; 13 13 #&gt; 14 14 #&gt; 15 15 #&gt; 16 16 #&gt; 17 17 #&gt; 18 18 #&gt; 19 19 #&gt; 20 20 #&gt; 21 21 #&gt; 22 22 #&gt; 23 23 #&gt; 24 24 #&gt; 25 25 #&gt; 26 26 #&gt; 27 27 #&gt; 28 28 #&gt; 29 29 #&gt; 30 U # U 염색체 코딩 변경 manplot &lt;- dplyr::mutate(manplot, Chromosome = dplyr::case_when(Chromosome == &quot;U&quot; ~ &quot;X&quot;, TRUE ~ Chromosome)) ## QQ plot CMplot::CMplot( # Pmap = manplot, plot.type = &quot;q&quot;, conf.int = TRUE, box = TRUE, main = paste0(&quot;QQ Plot (λ = &quot;, round(lambda, 3), &quot;)&quot;), file = &quot;png&quot;, dpi = 300, width = 4, height = 4, # ↓↓↓ 크기 조절 axis.cex = 0.7, # 축 눈금 글자 크기(기본 1 → 더 작게) lab.cex = 0.9, # 축 라벨(제목) 크기(기본 1.5 → 더 작게) main.cex = 1.0, # 타이틀 크기(기본 1.5 → 더 작게) # 라벨 위치 미세조정 xticks.pos = 0.5, # x축 눈금과 축 간격 ylab.pos = 1.5, # y축 라벨과 축 간격 mar = c(3, 4, 2.5, 2) # 아래-왼-위-오른 여백(클립 방지/밀착 조절) ) #&gt; Q-Q plotting P. #&gt; Plots are stored in: G:/Rhome/NIAS_ibv3_296ea/PLINK_120825_0322 QQ plot ## Manhattan plot CMplot::CMplot( manplot, plot.type = &quot;m&quot;, LOG10 = TRUE, chr.den.col = NULL, file = &quot;png&quot;, dpi = 300, width = 12, height = 4 ) #&gt; Rectangular Manhattan plotting P. #&gt; Plots are stored in: G:/Rhome/NIAS_ibv3_296ea/PLINK_120825_0322 Manhattan plot ## Circular Manhattan plot CMplot::CMplot( manplot, plot.type = &quot;c&quot;, LOG10 = TRUE, chr.den.col = NULL, file = &quot;png&quot;, dpi = 300, width = 4, height = 4, axis.cex = 0.7, # 축 눈금 글자 크기(기본 1 → 더 작게) lab.cex = 0.9, # 축 라벨(제목) 크기(기본 1.5 → 더 작게) mar = c(1, 1, 1, 1), # 기본(3,6,3,3)보다 훨씬 타이트 cir.chr.h = 0.6 # 바깥 크로모솜 테두리 두께 축소 ) #&gt; Circular Manhattan plotting P. #&gt; Plots are stored in: G:/Rhome/NIAS_ibv3_296ea/PLINK_120825_0322 Circular Manhattan plot # plot 위치 및 이름 변경 file.rename(&quot;QQplot.P.png&quot;, file.path(figs_dir, paste0(&quot;QQplot.P_&quot;, single_trait, &quot;.png&quot;))) file.rename(&quot;Rect_Manhtn.P.png&quot;, file.path(figs_dir, paste0(&quot;Rect_Manhtn.P_&quot;, single_trait, &quot;.png&quot;))) file.rename(&quot;Cir_Manhtn.P.png&quot;, file.path(figs_dir, paste0(&quot;Cir_Manhtn.P_&quot;, single_trait, &quot;.png&quot;))) /* 이 출력 블록 전체의 기본 폰트/줄높이 통일 */ .outputs { font-size: .95rem; line-height: 1.5; } /* 표와 표 내부 요소들이 동일한 크기를 상속받도록 강제 */ .outputs .outputs-table, .outputs .outputs-table td, .outputs .outputs-table th, .outputs .outputs-table ul, .outputs .outputs-table li, .outputs .outputs-table code { font-size: inherit !important; line-height: inherit !important; } /* 표 안 리스트 여백 정리 */ .outputs .outputs-table td ul { margin: 0; padding-left: 1rem; } /* 표 폭 자동 */ .outputs .outputs-table { table-layout: auto !important; width: 100%; } /* 절대 줄바꿈 금지(셀 + 내부 모든 요소) */ .outputs .outputs-table td.nowrap, .outputs .outputs-table td.nowrap *, .outputs .outputs-table td.nowrap code { white-space: nowrap !important; word-break: normal !important; overflow-wrap: normal !important; hyphens: none !important; } /* Bootstrap 없는 환경 대비 (안전장치) */ .mb-0 { margin-bottom: 0 !important; } .list-unstyled { list-style: none; padding-left: 0; }  최종출력물 품종별 (05_gwas/&lt;breed&gt;/ 내부) 위치 파일 이름 형식 설명 05_gwas/&lt;breed&gt;/ A_matrix_heatmap.png PNG GRM(유전체 관계 행렬) 히트맵 05_gwas/&lt;breed&gt;/figs/ pheno_distribution_&lt;trait&gt;.png pve_hist_&lt;trait&gt;.png QQplot.P_&lt;trait&gt;.png Rect_Manhtn.P_&lt;trait&gt;.png Cir_Manhtn.P_&lt;trait&gt;.png PNG 표현형 분포 플롯 PVE 분포 플롯 QQ 플롯(λ 포함) 맨해튼 플롯(직사각형) 맨해튼 플롯(원형) 05_gwas/&lt;breed&gt;/gwas/ assoc_&lt;trait&gt;.rds RDS GENESIS::assocTestSingle() 결과 객체 (재분석/추가 가공용) 05_gwas/&lt;breed&gt;/tables/ assoc_&lt;trait&gt;.csv CSV 단일 마커 연관성 표: P-value, 효과, 표준오차, PVE, FDR(BH), Bonferroni 등 05_gwas/&lt;breed&gt;/tables/ gwas_summary_&lt;trait&gt;.csv CSV 요약 지표: SNP 수, λ, 유의 SNP 개수(FDR/Bonferroni), 최소 P, 해당 SNP index ID 참고  현재 설정 &lt;breed&gt; = holstein &lt;trait&gt; = days_in_milk /* 'outputs' 상자 내부의 h5와, 그 다음에 오는 ul 및 li의 폰트를 조절 */ .outputs h5 { font-size: 1.2em !important; /* 이 값을 조절하여 '참고' 글씨 크기 변경 */ font-weight: 700; /* 글씨를 좀 더 굵게 (선택 사항) */ } .outputs h5 + ul, .outputs h5 + ul li { font-size: 1.2em !important; line-height: inherit !important; } 3.10  R로 GWAS 과정 완료 ✅ R로 하는 GWAS 절차를 끝까지 잘 마쳤다! 모든 단계를 거쳐 최종 출력물을 만들었다.  이제 Holstein의 다른 형질들과 Jersey 데이터셋에 대해서도 GWAS 분석을 할 수 있다.  3.11 스크립트 전체 보기  GWAS R script gwas_workflow.R 파일 —  클릭하여 보기 ## 1. 패키지 설치 & 로딩 # ---- 설치어시스턴트 ------------------------------------------------------- cran_pkgs -1/0/1 KI dplyr::select(SNP = variant.id, Chromosome = chr, Position = pos, P = Score.pval) # 염색체 분류 확인 dplyr::distinct(manplot, Chromosome) # U 염색체 코딩 변경 manplot "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
